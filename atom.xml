<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tech Spot</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-07-01T09:21:32.842Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Hansamali Gamage</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NLog Configurations</title>
    <link href="http://yoursite.com/2016/06/29/NLog-Configurations/"/>
    <id>http://yoursite.com/2016/06/29/NLog-Configurations/</id>
    <published>2016-06-28T18:30:00.000Z</published>
    <updated>2016-07-01T09:21:32.842Z</updated>
    
    <content type="html">&lt;p&gt;Many of the systems, we develop today needs some kind of a logging/tracing mechanism to identify issues or any kind of information.&lt;/p&gt;
&lt;h2 id=&quot;NLog&quot;&gt;&lt;a href=&quot;#NLog&quot; class=&quot;headerlink&quot; title=&quot;NLog&quot;&gt;&lt;/a&gt;NLog&lt;/h2&gt;&lt;p&gt;NLog is a free logging framework to log various kind of messages into a specified place. We can use NLog in a .NET environment, as well as with Xamarin and Windows phone.&lt;/p&gt;
&lt;h2 id=&quot;Logging&quot;&gt;&lt;a href=&quot;#Logging&quot; class=&quot;headerlink&quot; title=&quot;Logging&quot;&gt;&lt;/a&gt;Logging&lt;/h2&gt;&lt;p&gt;If we want to log a message from our application, We can use EventViewer without any libraries. But If we want to share the log file with someone else and analyse it in the future, we can’t do that with Eventviewer.&lt;br&gt; So we have to go for a logging framework if we want to write messages into a file or a database.&lt;/p&gt;
&lt;h2 id=&quot;Logging-Frameworks&quot;&gt;&lt;a href=&quot;#Logging-Frameworks&quot; class=&quot;headerlink&quot; title=&quot;Logging Frameworks&quot;&gt;&lt;/a&gt;Logging Frameworks&lt;/h2&gt;&lt;p&gt; We can use any of these framework for logging purpose, Log4net, NLog, ELMAH, Microsoft Enterprise Library, NSpring, ELMAH is a web logging framework, All the other frameworks can be used with any .NET type of application.&lt;br&gt; When we use NLog or Log4net for logging, it takes just few minutes to integrate it to the application, But performancewise its not the same. NLog is much faster than Log4net and as well as all the above mentioned logging frameworks.&lt;br&gt; NSpring also easy to setup, but it requires more coding to log a message. With a large scale enterprise application, It will be tedious to work with NSpring.&lt;br&gt; Microsoft Enterprise Library (EntLib) is much faster, But need heavy configurations and coding to work with it. ELMAH is a web logger, It’s going to log the messages into a xml file by default.&lt;/p&gt;
&lt;p&gt; If you application needs file logging and more performance, better to go with NLog or NSpring. We can use Log4net also, it’s not that much faster, but easy to setup and use it in the application&lt;/p&gt;
&lt;h2 id=&quot;Install-NLog&quot;&gt;&lt;a href=&quot;#Install-NLog&quot; class=&quot;headerlink&quot; title=&quot;Install NLog&quot;&gt;&lt;/a&gt;Install NLog&lt;/h2&gt;&lt;p&gt; Latest stable version of NLog up to now is NLog 4.3.5. With Nuget Package manager, I installed NLog,&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;/2016/06/29/NLog-Configurations/2.png&quot; alt=&quot;Get Method With a Parameter.&quot;&gt;&lt;br&gt; &lt;img src=&quot;/images/GetMethodWithParameter.png&quot; alt=&quot;Get Method With a Parameter.&quot;&gt;&lt;br&gt;&lt;img src=&quot;/images/nLogInstall.png&quot; alt=&quot;NLog Installation in Package Manager&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;NLog-Targets&quot;&gt;&lt;a href=&quot;#NLog-Targets&quot; class=&quot;headerlink&quot; title=&quot;NLog Targets&quot;&gt;&lt;/a&gt;NLog Targets&lt;/h2&gt;&lt;p&gt; NLog targets are used to show, store or pass the message into another destination.&lt;br&gt; Some commonly used NLog targets are shown below.&lt;br&gt; Console : writes message to a console window.&lt;br&gt; Event Log : writes message to event viewer.&lt;br&gt; Debugger : writes messagee to the attatched debugger.&lt;br&gt; File : writes log message to a file.&lt;br&gt; Database : store log message in database.&lt;br&gt; Memory : can write log message into a arraylist in memory.&lt;br&gt; Mail : send log message by email.&lt;br&gt; Method call : For log message, calls specific static method.&lt;br&gt; Network : send log message over a network.&lt;br&gt; Service : calls a web service for each log message.&lt;br&gt;And if these targets dont satisfy your requirements, you can create your own target, (custom target)&lt;/p&gt;
&lt;h2 id=&quot;Target-Layout&quot;&gt;&lt;a href=&quot;#Target-Layout&quot; class=&quot;headerlink&quot; title=&quot;Target Layout&quot;&gt;&lt;/a&gt;Target Layout&lt;/h2&gt;&lt;p&gt; Target layout means how our log message is going to display, in which format, which order. We can create custom layout renders as well.&lt;br&gt; Commonly used layouts are as follows,&lt;br&gt; ${callsite} : Class name, method name or source information of the log message.&lt;br&gt; ${callsite-linenumber} : line no of call site source.&lt;br&gt; ${date} : date and time&lt;br&gt; ${exception} : exception details&lt;br&gt; ${level} : log level&lt;br&gt; ${logger} : logger name&lt;br&gt; ${longdate} : date and time in long format.&lt;br&gt; ${message} : log message.&lt;br&gt; ${stacktrace} : stack trace&lt;/p&gt;
&lt;h2 id=&quot;NLog-rules&quot;&gt;&lt;a href=&quot;#NLog-rules&quot; class=&quot;headerlink&quot; title=&quot;NLog rules&quot;&gt;&lt;/a&gt;NLog rules&lt;/h2&gt;&lt;p&gt; NLog rules are called as a log routing table. It’s going to matches with a target and writes into a log with specified layout.&lt;br&gt; Some of the attributes in NLog rules,&lt;br&gt; name : logger name,&lt;br&gt; minlevel : minimum log level for a rule to match&lt;br&gt; maxlevel : maximum log level for a rule to match&lt;br&gt; level : single log level for a rule to match&lt;br&gt; levels : comma seperated list of logs for a rule to match&lt;br&gt; write to : comma seperated list of targets to be written when a rule matches&lt;br&gt; final : no further rules are processed when this rule matches&lt;br&gt; enabled : going to disable/enable rules&lt;/p&gt;
&lt;h2 id=&quot;Nlog-levels&quot;&gt;&lt;a href=&quot;#Nlog-levels&quot; class=&quot;headerlink&quot; title=&quot;Nlog levels&quot;&gt;&lt;/a&gt;Nlog levels&lt;/h2&gt;&lt;p&gt; One thing to note, In these level attribute, log messages are ordered from type. Trace is the minlevel log type, then Debug, Info, Warn, Error and Fatal.&lt;br&gt; Trace level can be used when we need to notify the begining and end of a method, From Debug logs, we can identify whether session is expired, user is authenticated. Info logs are used for more generic scenarios like, Email sent.&lt;br&gt; Warn level can be used to notify warnings, Error logs are used for exceptions and when application crashes. Fatal logs are highest level, for most important cases.&lt;/p&gt;
&lt;h2 id=&quot;Let’s-see-what’s-in-action&quot;&gt;&lt;a href=&quot;#Let’s-see-what’s-in-action&quot; class=&quot;headerlink&quot; title=&quot;Let’s see what’s in action&quot;&gt;&lt;/a&gt;Let’s see what’s in action&lt;/h2&gt;&lt;p&gt; In configuration file, I have configured log type and log level, I have used file logging, Trace as a minimum logging level.&lt;/p&gt;
&lt;p&gt; picccc&lt;/p&gt;
&lt;p&gt; In code, I have written like this, &lt;/p&gt;
&lt;p&gt; piccccccc&lt;/p&gt;
&lt;p&gt; Let’s check how it’s written in the log file&lt;/p&gt;
&lt;p&gt; piccccccccc&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Many of the systems, we develop today needs some kind of a logging/tracing mechanism to identify issues or any kind of information.&lt;/p&gt;
&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LINQ comes to rescue!</title>
    <link href="http://yoursite.com/2016/04/04/LINQ%20comes%20to%20rescue/"/>
    <id>http://yoursite.com/2016/04/04/LINQ comes to rescue/</id>
    <published>2016-04-03T18:30:00.000Z</published>
    <updated>2016-06-07T17:03:39.368Z</updated>
    
    <content type="html">&lt;p&gt;Today, I’m going to explain a very small but tricky code part, day to day we use this, but never give it a second glance, because of that we miss this in many places :)&lt;/p&gt;
&lt;p&gt;Let’s first create a simple class&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/carClass.png&quot; alt=&quot;Car class&quot;&gt;&lt;/p&gt;
&lt;p&gt;we have list of cars, like this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/listOfCars.png&quot; alt=&quot;List of cars&quot;&gt;&lt;/p&gt;
&lt;p&gt;I want to set &lt;em&gt;Milege&lt;/em&gt; property as  ‘100’ when year is ‘2015’&lt;br&gt;so, what’s the method comes into your mind ?&lt;br&gt;for loop, foreach or while loop, Iterations are not so good when it comes to the performance.&lt;/p&gt;
&lt;p&gt;With the help of LINQ, we can perform the filtering and modification both in just one line :)&lt;/p&gt;
&lt;p&gt;In LINQ world, we have many operations to filter, to projection, to modify and many more.&lt;/p&gt;
&lt;p&gt;Solution from LINQ,&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/linqQuery.png&quot; alt=&quot;LINQ query to filter and modify list values.&quot;&gt;&lt;/p&gt;
&lt;p&gt; Yes, It’s difficult to read the code though, But if you have performance concerns, and want to write the program with few lines of code, You can get use of this LINQ query.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Today, I’m going to explain a very small but tricky code part, day to day we use this, but never give it a second glance, because of that
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ODATA Reads with Parameters</title>
    <link href="http://yoursite.com/2016/03/02/ODATA%20Reads%20with%20Parameters/"/>
    <id>http://yoursite.com/2016/03/02/ODATA Reads with Parameters/</id>
    <published>2016-03-01T18:30:00.000Z</published>
    <updated>2016-06-05T17:17:11.961Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Data-READs-with-Parameters&quot;&gt;&lt;a href=&quot;#Data-READs-with-Parameters&quot; class=&quot;headerlink&quot; title=&quot;Data READs with Parameters&quot;&gt;&lt;/a&gt;Data READs with Parameters&lt;/h2&gt;&lt;p&gt;In this post, We’ll focus on how to read a OData service with a parameter.&lt;/p&gt;
&lt;h2 id=&quot;Service-method-with-a-parameter&quot;&gt;&lt;a href=&quot;#Service-method-with-a-parameter&quot; class=&quot;headerlink&quot; title=&quot;Service method with a parameter&quot;&gt;&lt;/a&gt;Service method with a parameter&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/GetMethodWithParameter.png&quot; alt=&quot;Get Method With a Parameter.&quot;&gt;&lt;/p&gt;
&lt;p&gt;Now, we’ll see how to retrieve data with a parameter,&lt;/p&gt;
&lt;h2 id=&quot;Url-in-the-browser&quot;&gt;&lt;a href=&quot;#Url-in-the-browser&quot; class=&quot;headerlink&quot; title=&quot;Url in the browser&quot;&gt;&lt;/a&gt;Url in the browser&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/GetMethodUrl.png&quot; alt=&quot;Get Method Url With a Parameter.&quot;&gt;&lt;/p&gt;
&lt;p&gt;In browser, we can see only filtered students. in url, append the parameter with values.&lt;/p&gt;
&lt;h2 id=&quot;Power-Query-Window&quot;&gt;&lt;a href=&quot;#Power-Query-Window&quot; class=&quot;headerlink&quot; title=&quot;Power Query Window&quot;&gt;&lt;/a&gt;Power Query Window&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/PowerQueryWindow.png&quot; alt=&quot;Power Query editor.&quot;&gt;&lt;/p&gt;
&lt;p&gt;From the Power Query window, we can see dataset like this.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Data-READs-with-Parameters&quot;&gt;&lt;a href=&quot;#Data-READs-with-Parameters&quot; class=&quot;headerlink&quot; title=&quot;Data READs with Parameters&quot;&gt;&lt;/a&gt;Data REA
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ODATA Reads</title>
    <link href="http://yoursite.com/2016/02/19/ODATA%20Reads/"/>
    <id>http://yoursite.com/2016/02/19/ODATA Reads/</id>
    <published>2016-02-19T13:15:36.000Z</published>
    <updated>2016-06-03T13:02:01.127Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Data-READs&quot;&gt;&lt;a href=&quot;#Data-READs&quot; class=&quot;headerlink&quot; title=&quot;Data READs&quot;&gt;&lt;/a&gt;Data READs&lt;/h2&gt;&lt;p&gt;Let’s start with a newer version of ODATA to access data from a existing service, In this solution I have used &lt;em&gt; Web API 2.2 with ODATA v4 &lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;ODATA-v4-package&quot;&gt;&lt;a href=&quot;#ODATA-v4-package&quot; class=&quot;headerlink&quot; title=&quot;ODATA v4 package&quot;&gt;&lt;/a&gt;ODATA v4 package&lt;/h2&gt;&lt;p&gt;Visual Studio has a built in package to create ODATA v4 services, Package contains all the libraries required to create a ODATA v4 endpoint.&lt;/p&gt;
&lt;h2 id=&quot;Integrate-ODATA-v4-package-into-solution&quot;&gt;&lt;a href=&quot;#Integrate-ODATA-v4-package-into-solution&quot; class=&quot;headerlink&quot; title=&quot;Integrate ODATA v4 package into solution&quot;&gt;&lt;/a&gt;Integrate ODATA v4 package into solution&lt;/h2&gt;&lt;p&gt;We can add the necessary OData package into solution like this, Select &lt;em&gt; Microsoft ASP.NET Web API 2.2 for OData v4.0 &lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/nugetPackageManagementStore.png&quot; alt=&quot;nuget package management store.&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;All-the-relevant-libraries-are-installing&quot;&gt;&lt;a href=&quot;#All-the-relevant-libraries-are-installing&quot; class=&quot;headerlink&quot; title=&quot;All the relevant libraries are installing&quot;&gt;&lt;/a&gt;All the relevant libraries are installing&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/odataRelatedPackagesInstall.png&quot; alt=&quot;All the ODATA related libraries are installing.&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Register-OData-endpoint&quot;&gt;&lt;a href=&quot;#Register-OData-endpoint&quot; class=&quot;headerlink&quot; title=&quot;Register OData endpoint&quot;&gt;&lt;/a&gt;Register OData endpoint&lt;/h2&gt;&lt;p&gt;Register service endpoint in Register method of WebApiConfig file&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/registerServiceEndpoints.png&quot; alt=&quot;Register service endpoints.&quot;&gt;&lt;/p&gt;
&lt;p&gt;In line no 22, I have exposed the Student entity, Data read method is implemented in OData controller, &lt;em&gt; StudentController &lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;Student-Controller-implements-OData-Controller&quot;&gt;&lt;a href=&quot;#Student-Controller-implements-OData-Controller&quot; class=&quot;headerlink&quot; title=&quot;Student Controller implements OData Controller&quot;&gt;&lt;/a&gt;Student Controller implements OData Controller&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/studentController.png&quot; alt=&quot;Student Controller&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;StudentController&lt;/em&gt; inherits from OData Controller, So all the CRUD operations related to student can be implemented in this controller.&lt;/p&gt;
&lt;h2 id=&quot;How-it-works-in-the-browser&quot;&gt;&lt;a href=&quot;#How-it-works-in-the-browser&quot; class=&quot;headerlink&quot; title=&quot;How it works in the browser&quot;&gt;&lt;/a&gt;How it works in the browser&lt;/h2&gt;&lt;p&gt;now ping to the OData endpoint,&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/allAvailableEntities.png&quot; alt=&quot;Available entities&quot;&gt;&lt;/p&gt;
&lt;p&gt;We can see all the available entities in the endpoint with metadata.&lt;/p&gt;
&lt;h2 id=&quot;Read-Students&quot;&gt;&lt;a href=&quot;#Read-Students&quot; class=&quot;headerlink&quot; title=&quot;Read Students&quot;&gt;&lt;/a&gt;Read Students&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/readStudents.png&quot; alt=&quot;Read Students&quot;&gt;&lt;/p&gt;
&lt;p&gt;By appending entity, &lt;em&gt; Student &lt;/em&gt; into url, we can read student data&lt;/p&gt;
&lt;h2 id=&quot;Read-Data-types&quot;&gt;&lt;a href=&quot;#Read-Data-types&quot; class=&quot;headerlink&quot; title=&quot;Read Data types&quot;&gt;&lt;/a&gt;Read Data types&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/readDatatypes.png&quot; alt=&quot;Read data types&quot;&gt;&lt;/p&gt;
&lt;p&gt;We can read data types of student using the &lt;em&gt; $metadata &lt;/em&gt; tag&lt;/p&gt;
&lt;h2 id=&quot;Excel-2016-with-OData-v4&quot;&gt;&lt;a href=&quot;#Excel-2016-with-OData-v4&quot; class=&quot;headerlink&quot; title=&quot;Excel 2016 with OData v4&quot;&gt;&lt;/a&gt;Excel 2016 with OData v4&lt;/h2&gt;&lt;p&gt;We already know office is not only for manipulating documents, We can perform many advanced queries with Excel. Excel supports to fetch data from different other sources, newer update is OData sources &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/Excel2016odatav4.png&quot; alt=&quot;Excel 2016 - ODATA v4&quot;&gt;&lt;/p&gt;
&lt;p&gt;In excel 2016, We can connect to a OData source like this,&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/dataConnectionWizard.png&quot; alt=&quot;Data connection wizard&quot;&gt;&lt;/p&gt;
&lt;p&gt;But we get an error!!!!!!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/errorDataConnectionWizard.png&quot; alt=&quot;error from Data connection wizard - office 2016 odata v4&quot;&gt;&lt;/p&gt;
&lt;p&gt;It clearly says Excel 2016 can be only integrated with Odata v3 or any earlier data feeds :) But for your information, with Excel 2016 as well as Excel 2013, we can integrate OData v3 &lt;/p&gt;
&lt;h2 id=&quot;Excel-2013-amp-OData-v4&quot;&gt;&lt;a href=&quot;#Excel-2013-amp-OData-v4&quot; class=&quot;headerlink&quot; title=&quot;Excel 2013 &amp;amp; OData v4 ?&quot;&gt;&lt;/a&gt;Excel 2013 &amp;amp; OData v4 ?&lt;/h2&gt;&lt;p&gt;With Excel 2013, ODATA v4 is not compatible. But we can use a V3 format service with Excel 2013.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/errorExcel2013ODatav4.png&quot; alt=&quot;error - office 2013 odata v4&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Excel-2016-with-OData-v4-Power-Query&quot;&gt;&lt;a href=&quot;#Excel-2016-with-OData-v4-Power-Query&quot; class=&quot;headerlink&quot; title=&quot;Excel 2016 with OData v4 - Power Query&quot;&gt;&lt;/a&gt;Excel 2016 with OData v4 - Power Query&lt;/h2&gt;&lt;p&gt;With ODATA v4, we can’t use ODATA source option, But we have Power Query option to analyse data.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/Excel2016ODatav4WithPowerQuery.png&quot; alt=&quot;Excel 2016 - ODATA v4 with Power Query&quot;&gt;&lt;/p&gt;
&lt;p&gt;In Data tab, we have many options to fetch data from different other sources, We can select &lt;em&gt;From OData Feed&lt;/em&gt; option.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/powerQueryOdatafeed.png&quot; alt=&quot;PowerQuery - Odata feed&quot;&gt;&lt;/p&gt;
&lt;p&gt;We can use Office 2016 Power Query option with OData v4.&lt;/p&gt;
&lt;h2 id=&quot;Power-Query-Editor&quot;&gt;&lt;a href=&quot;#Power-Query-Editor&quot; class=&quot;headerlink&quot; title=&quot;Power Query Editor&quot;&gt;&lt;/a&gt;Power Query Editor&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/powerQueryEditor.png&quot; alt=&quot;PowerQuery editor&quot;&gt;&lt;/p&gt;
&lt;p&gt;This is the query editor, we can select/remove columns, can remove duplicates, group by a column, create a new column based on a mathematical function and much more advanced operations.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/queryEditorWindow.png&quot; alt=&quot;Query editor window&quot;&gt;&lt;/p&gt;
&lt;p&gt;In the next section, we’ll see how to read data by passing a value :)&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Data-READs&quot;&gt;&lt;a href=&quot;#Data-READs&quot; class=&quot;headerlink&quot; title=&quot;Data READs&quot;&gt;&lt;/a&gt;Data READs&lt;/h2&gt;&lt;p&gt;Let’s start with a newer version of OD
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ODATA Features</title>
    <link href="http://yoursite.com/2016/01/23/ODATAFeatures/"/>
    <id>http://yoursite.com/2016/01/23/ODATAFeatures/</id>
    <published>2016-01-23T13:15:36.000Z</published>
    <updated>2016-06-03T10:18:15.894Z</updated>
    
    <content type="html">&lt;h2 id=&quot;ODATA&quot;&gt;&lt;a href=&quot;#ODATA&quot; class=&quot;headerlink&quot; title=&quot;ODATA&quot;&gt;&lt;/a&gt;ODATA&lt;/h2&gt;&lt;p&gt;ODATA is a open data protocol to access data using REST architecture. ODATA is a Microsoft standard, but available with Android &amp;amp; IOS platforms as well. ODATA supports for JSON and Atom formats. With the help of ODATA , we can access data in variety of sources like relational databases, Web sites, File systems and Content Management Systems.&lt;/p&gt;
&lt;h2 id=&quot;ODATA-has-more-features-than-REST&quot;&gt;&lt;a href=&quot;#ODATA-has-more-features-than-REST&quot; class=&quot;headerlink&quot; title=&quot;ODATA has more features than REST!&quot;&gt;&lt;/a&gt;ODATA has more features than REST!&lt;/h2&gt;&lt;p&gt;REST is an architectural pattern to implement a service, But with ODATA it’s going to provide more features to more sources like File systems, Content Management Systems. ODATA services supports for query options like filter, select, expand, order by and many more. As per our requirement, we can filter the result set, order as we want. And we can skip some rows, Even we can select the top row as well.&lt;/p&gt;
&lt;h2 id=&quot;It’s-2016&quot;&gt;&lt;a href=&quot;#It’s-2016&quot; class=&quot;headerlink&quot; title=&quot;It’s 2016!!!!&quot;&gt;&lt;/a&gt;It’s 2016!!!!&lt;/h2&gt;&lt;p&gt;Microsoft has introduced variety of features with Office 2016, If your old REST services are using ODATA protocol, We can implement a simple power BI solution just with Excel itself.&lt;/p&gt;
&lt;h2 id=&quot;ODATA-Versions-so-far&quot;&gt;&lt;a href=&quot;#ODATA-Versions-so-far&quot; class=&quot;headerlink&quot; title=&quot;ODATA Versions so far&quot;&gt;&lt;/a&gt;ODATA Versions so far&lt;/h2&gt;&lt;p&gt;After ODATA V2 and ODATA V3, Now ODATA V4 has been released as a major release. If you want to build a open data service, we can use &lt;strong&gt; ODATA v4 with WebAPI 2.2 &lt;/strong&gt; as a solution.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ODATA&quot;&gt;&lt;a href=&quot;#ODATA&quot; class=&quot;headerlink&quot; title=&quot;ODATA&quot;&gt;&lt;/a&gt;ODATA&lt;/h2&gt;&lt;p&gt;ODATA is a open data protocol to access data using REST ar
    
    </summary>
    
    
  </entry>
  
</feed>
