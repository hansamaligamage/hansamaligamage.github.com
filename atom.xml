<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tech Spot</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-10-02T05:43:24.168Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Hansamali Gamage</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Create a Web API application in .NETCore</title>
    <link href="http://yoursite.com/2016/10/02/Create-a-Web-API-application-in-NETCore/"/>
    <id>http://yoursite.com/2016/10/02/Create-a-Web-API-application-in-NETCore/</id>
    <published>2016-10-01T20:55:14.000Z</published>
    <updated>2016-10-02T05:43:24.168Z</updated>
    
    <content type="html">&lt;p&gt;Let’s try to create a .NETCore application from &lt;em&gt; Visual Studio 2015 &lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/create-dotnet-core-web-application.PNG&quot; alt=&quot;Create .NETCore web application from Visual Studio&quot;&gt;&lt;/p&gt;
&lt;p&gt;Create a new project from Visual Studio 2015, In &lt;em&gt; .NETCore &lt;/em&gt; tab, select &lt;em&gt; ASP.NET Core Web Application (.NET Core) &lt;/em&gt;. Give it a name and click on OK.  &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/select-web-api-template.PNG&quot; alt=&quot;Select Web API from ASP.NET Core templates&quot;&gt;&lt;/p&gt;
&lt;p&gt;Select &lt;em&gt; Web API &lt;/em&gt; from ASP.NET Core templates and click on OK.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/build-the-project.PNG&quot; alt=&quot;build the project and see changes&quot;&gt;&lt;/p&gt;
&lt;p&gt;Check folder structure of the application, It includes a &lt;em&gt; Program.cs &lt;/em&gt; and &lt;em&gt; Startup &lt;/em&gt; file. It includes a &lt;em&gt; project.json &lt;/em&gt; file to define all required packages for your application. &lt;em&gt; appsettings.json &lt;/em&gt; file maintains application settings same as &lt;em&gt; web.config &lt;/em&gt; file in a ASP.NET Web application. &lt;em&gt; Controllers &lt;/em&gt; folder has all Web API Controllers.&lt;/p&gt;
&lt;h1 id=&quot;Open-service-application-from-Visual-Studio-Code&quot;&gt;&lt;a href=&quot;#Open-service-application-from-Visual-Studio-Code&quot; class=&quot;headerlink&quot; title=&quot;Open service application from Visual Studio Code.&quot;&gt;&lt;/a&gt;Open service application from Visual Studio Code.&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/open-application-in-visual-studio-code.PNG&quot; alt=&quot;Open your application in Visual Studio Code&quot;&gt;&lt;/p&gt;
&lt;p&gt;cd into the application directory and open &lt;em&gt; Visual Studio Code &lt;/em&gt; using &lt;em&gt; code . &lt;/em&gt; command. You can see folder structure of your application as above. Add assets to build and debug your application as the info dialog box suggests.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/vscode-folder-is-added.PNG&quot; alt=&quot;vscode folder is added&quot;&gt;&lt;/p&gt;
&lt;p&gt;vscode folder is added into the solution with launch.json and tasks.json file.&lt;/p&gt;
&lt;h1 id=&quot;Dependencies-in-project-json-file&quot;&gt;&lt;a href=&quot;#Dependencies-in-project-json-file&quot; class=&quot;headerlink&quot; title=&quot;Dependencies in project.json file&quot;&gt;&lt;/a&gt;Dependencies in project.json file&lt;/h1&gt;&lt;p&gt;Let’s see what are the dependencies required for a mvc application.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/aspnetcore-mvc-package.PNG&quot; alt=&quot;basic packages required for a mvc application&quot;&gt;&lt;/p&gt;
&lt;p&gt;Since We create a Web API application, in &lt;em&gt; project.json &lt;/em&gt; file, It shows &lt;strong&gt; Microsoft.AspNetCore.Mvc &lt;/strong&gt; package dependency.&lt;/p&gt;
&lt;h1 id=&quot;Run-ValuesController-and-check-service-calls&quot;&gt;&lt;a href=&quot;#Run-ValuesController-and-check-service-calls&quot; class=&quot;headerlink&quot; title=&quot;Run ValuesController and check service calls.&quot;&gt;&lt;/a&gt;Run ValuesController and check service calls.&lt;/h1&gt;&lt;p&gt;Let’s run Web API application and check available services.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/get-method-in-values-controller.PNG&quot; alt=&quot;Read service in ValuesController&quot;&gt;&lt;/p&gt;
&lt;p&gt;Build (Ctrl + Shift + b) and run (Ctrl + F5) your application and ping to the Read service as above. Its shows return values in the browser.&lt;/p&gt;
&lt;h1 id=&quot;Let’s-build-the-movie-service&quot;&gt;&lt;a href=&quot;#Let’s-build-the-movie-service&quot; class=&quot;headerlink&quot; title=&quot;Let’s build the movie service&quot;&gt;&lt;/a&gt;Let’s build the movie service&lt;/h1&gt;&lt;h2 id=&quot;Create-Movie-model&quot;&gt;&lt;a href=&quot;#Create-Movie-model&quot; class=&quot;headerlink&quot; title=&quot;Create Movie model.&quot;&gt;&lt;/a&gt;Create Movie model.&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/add-movie-model.PNG&quot; alt=&quot;Add Movie model&quot;&gt;&lt;/p&gt;
&lt;p&gt;Create a &lt;em&gt; Model &lt;/em&gt; folder to define entities in your application. Then create &lt;em&gt; Movie &lt;/em&gt; class and add properties into it. We follow &lt;em&gt; Code First approach &lt;/em&gt; in this example. So when we create the database &lt;em&gt; Movie &lt;/em&gt; table will be created.&lt;/p&gt;
&lt;h2 id=&quot;Create-Context-class-to-build-the-database&quot;&gt;&lt;a href=&quot;#Create-Context-class-to-build-the-database&quot; class=&quot;headerlink&quot; title=&quot;Create Context class to build the database.&quot;&gt;&lt;/a&gt;Create Context class to build the database.&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/create-context-class.PNG&quot; alt=&quot;Create db context class&quot;&gt;&lt;/p&gt;
&lt;p&gt;public class MovieDbContext : DbContext&lt;br&gt;    {&lt;br&gt;    }&lt;/p&gt;
&lt;p&gt; From &lt;em&gt; context &lt;/em&gt; class, our database will be generated. &lt;em&gt;Context &lt;/em&gt; class should be inherited from &lt;em&gt; DbContext &lt;/em&gt; class. In order to do that, we have to add references from &lt;em&gt; Entityframework core.&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;Install-Entityframework-Core-EF-Core&quot;&gt;&lt;a href=&quot;#Install-Entityframework-Core-EF-Core&quot; class=&quot;headerlink&quot; title=&quot;Install Entityframework Core (EF Core)&quot;&gt;&lt;/a&gt;Install Entityframework Core (EF Core)&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/add-entityframeworkcore-into-project-json.PNG&quot; alt=&quot;Add entityframeworkcore references into project.json file&quot;&gt;&lt;/p&gt;
&lt;p&gt;Add &lt;em&gt; entityframeworkcore &lt;/em&gt; reference as a dependency into project.json file,  &lt;em&gt; “Microsoft.EntityFrameworkCore”: “1.0.0” &lt;/em&gt; and resolve reference error in &lt;em&gt; MovieDbContext &lt;/em&gt; class by adding &lt;em&gt; using Microsoft.EntityFrameworkCore &lt;/em&gt; statement. &lt;/p&gt;
&lt;h2 id=&quot;Define-the-connectionstring&quot;&gt;&lt;a href=&quot;#Define-the-connectionstring&quot; class=&quot;headerlink&quot; title=&quot;Define the connectionstring&quot;&gt;&lt;/a&gt;Define the connectionstring&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/define-connectionstring-in-appsetings-json.PNG&quot; alt=&quot;Define the connectionstring in appsetings.json file&quot;&gt;&lt;/p&gt;
&lt;p&gt;Define the connectionstring in appsettings.json file to connect to the Sql server.&lt;/p&gt;
&lt;h2 id=&quot;Add-entities-in-moviecontext-class&quot;&gt;&lt;a href=&quot;#Add-entities-in-moviecontext-class&quot; class=&quot;headerlink&quot; title=&quot;Add entities in moviecontext class&quot;&gt;&lt;/a&gt;Add entities in moviecontext class&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/run-ef-migrations.PNG&quot; alt=&quot;run EFCore migrations&quot;&gt;&lt;/p&gt;
&lt;p&gt;Try to run migrations for &lt;em&gt; MovieDbContext &lt;/em&gt; class, It gives an error. &lt;em&gt; No executable found matching command “dotnet-ef” &lt;/em&gt;, We have to install entityframeworkcore tools to run migrations from .NET cli. Let’s try to do that.&lt;/p&gt;
&lt;h2 id=&quot;Add-EFCore-tools&quot;&gt;&lt;a href=&quot;#Add-EFCore-tools&quot; class=&quot;headerlink&quot; title=&quot;Add EFCore tools&quot;&gt;&lt;/a&gt;Add EFCore tools&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/add-entityframeworkcore-tools.PNG&quot; alt=&quot;Add EFCore tools and run migrations&quot;&gt;&lt;/p&gt;
&lt;p&gt;Add &lt;em&gt; “Microsoft.EntityframeworkCore.Tools” : “1.0.0-preview2-final” &lt;/em&gt; in tools section of &lt;em&gt; project.json. &lt;/em&gt; Try to run migration and it gives an error again!!, &lt;em&gt; Could not invoke this command with the startup project ‘demo’. Check that ‘Microsoft.EntityFrameworkCore.Design’ has been added to “dependencies” in the startup project and that the version of ‘Microsoft.EntityFrameworkCore.Tools’ in “tools” and ‘Microsoft.EntityFrameworkCore.Design’ are the same. See &lt;a href=&quot;http://go.microsoft.com/fwlink/?LinkId=798221&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://go.microsoft.com/fwlink/?LinkId=798221&lt;/a&gt; for more details, &lt;/em&gt; What’s we are missing,&lt;/p&gt;
&lt;p&gt;We haven’t added &lt;em&gt; ‘Microsoft.EntityFrameworkCore.Design’ &lt;/em&gt; as a reference, We have to add EFCore Design references to run migrations scripts. Let’s add it and check. And also it mentions &lt;em&gt; ‘Microsoft.EntityFrameworkCore.Design’ &lt;/em&gt; and &lt;em&gt; ‘Microsoft.EntityFrameworkCore.Tools’ &lt;/em&gt; version should be same.&lt;/p&gt;
&lt;h2 id=&quot;Add-EFCore-Design-reference&quot;&gt;&lt;a href=&quot;#Add-EFCore-Design-reference&quot; class=&quot;headerlink&quot; title=&quot;Add EFCore Design reference.&quot;&gt;&lt;/a&gt;Add EFCore Design reference.&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/add-entityframeworkcore-design-reference.PNG&quot; alt=&quot;Add entityframeworkcore design reference&quot;&gt;&lt;/p&gt;
&lt;p&gt;Add &lt;em&gt; “Microsoft.EntityFrameworkCore.Design”: “1.0.0-preview2-final” &lt;/em&gt; reference into project.json file. Note that, &lt;em&gt; ‘Microsoft.EntityFrameworkCore.Design’ &lt;/em&gt; and &lt;em&gt; ‘Microsoft.EntityFrameworkCore.Tools’ &lt;/em&gt; version are same.&lt;/p&gt;
&lt;p&gt;Then try to run migrations command again and it gives another error, &lt;em&gt; No parameterless constructor was found on ‘MovieDbContext’. Either add a parameterless constructor to ‘MovieDbContext’ or add an implementation of ‘IDbContextFactory&lt;moviedbcontext&gt;‘ in the same assembly as ‘MovieDbContext’. &lt;/moviedbcontext&gt;&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;Check-MovieDbContext-class&quot;&gt;&lt;a href=&quot;#Check-MovieDbContext-class&quot; class=&quot;headerlink&quot; title=&quot;Check MovieDbContext class&quot;&gt;&lt;/a&gt;Check MovieDbContext class&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/moviecontext-class.PNG&quot; alt=&quot;MovieDbContext class with constructor&quot;&gt;&lt;/p&gt;
&lt;p&gt; In MovieDbContext class, define constructor with context options and call base class method.&lt;/p&gt;
&lt;h2 id=&quot;Define-connectionstring-in-appsettings-file&quot;&gt;&lt;a href=&quot;#Define-connectionstring-in-appsettings-file&quot; class=&quot;headerlink&quot; title=&quot;Define connectionstring in appsettings file&quot;&gt;&lt;/a&gt;Define connectionstring in appsettings file&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/connectionstring_in_appsettings_json.PNG&quot; alt=&quot;Add connectionstring in appsettings.json file&quot;&gt;&lt;/p&gt;
&lt;p&gt;Add connectionstring in appsetings file like this, &lt;em&gt; “DefaultConnection” : “Data Source=localhost;Initial Catalog=movieDB;Integrated Security=true” &lt;/em&gt;  &lt;/p&gt;
&lt;h2 id=&quot;Startup-class-implementation&quot;&gt;&lt;a href=&quot;#Startup-class-implementation&quot; class=&quot;headerlink&quot; title=&quot;Startup class implementation&quot;&gt;&lt;/a&gt;Startup class implementation&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/startup-class-configure-services-method.PNG&quot; alt=&quot;Configure services in startup class&quot;&gt;&lt;/p&gt;
&lt;p&gt;In &lt;em&gt; Configure services &lt;/em&gt; method, add the database context and define the connectionstring of your database, in configure service method, it’s missing some references, since we havent add any EntityframeworkCore sqlserver references.&lt;/p&gt;
&lt;h2 id=&quot;Add-EFCore-Sqlserver-references&quot;&gt;&lt;a href=&quot;#Add-EFCore-Sqlserver-references&quot; class=&quot;headerlink&quot; title=&quot;Add EFCore Sqlserver references&quot;&gt;&lt;/a&gt;Add EFCore Sqlserver references&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/EFCore_sqlserver-references.PNG&quot; alt=&quot;Add EntityFrameworkCore sqlserver reference&quot;&gt;&lt;/p&gt;
&lt;p&gt;Add &lt;em&gt; “Microsoft.EntityFrameworkCore.SqlServer”: “1.0.0” &lt;/em&gt; reference in project.json file and restore them.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/pass-sqlserver-connectionstring.PNG&quot; alt=&quot;Add EFCore sqlserver references&quot;&gt;&lt;/p&gt;
&lt;p&gt;Now sqlserver reference is added. &lt;em&gt; Configure service &lt;/em&gt; method looks fine.&lt;/p&gt;
&lt;h2 id=&quot;Run-Migrations&quot;&gt;&lt;a href=&quot;#Run-Migrations&quot; class=&quot;headerlink&quot; title=&quot;Run Migrations&quot;&gt;&lt;/a&gt;Run Migrations&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/migrations-has-been-added.PNG&quot; alt=&quot;run migrations and check what happens&quot;&gt;&lt;/p&gt;
&lt;p&gt;Run Sqlserver migrations, It doesn’t give any errors in .NET cli, Migrations folder is created with migrations scripts. In &lt;em&gt; Initial Migration &lt;/em&gt; class, it defines &lt;em&gt; Up &lt;/em&gt; and &lt;em&gt; Down &lt;/em&gt; methods to create and drop movie table respectively.&lt;/p&gt;
&lt;h2 id=&quot;Update-the-database&quot;&gt;&lt;a href=&quot;#Update-the-database&quot; class=&quot;headerlink&quot; title=&quot;Update the database&quot;&gt;&lt;/a&gt;Update the database&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/movie-db-is-created.PNG&quot; alt=&quot;movie database is created&quot;&gt;&lt;/p&gt;
&lt;p&gt;run &lt;em&gt; dotnet ef database update &lt;/em&gt; command to update the database. In sqlserver &lt;em&gt; movieDB &lt;/em&gt; got created.&lt;/p&gt;
&lt;h2 id=&quot;Add-Movie-controller&quot;&gt;&lt;a href=&quot;#Add-Movie-controller&quot; class=&quot;headerlink&quot; title=&quot;Add Movie controller&quot;&gt;&lt;/a&gt;Add Movie controller&lt;/h2&gt;&lt;p&gt;In Visual studio code, We can’t use scaffolding. So i created a &lt;em&gt; Movie Controller &lt;/em&gt; with all the CRUD operations of &lt;em&gt; Movie &lt;/em&gt; entity in visual studio. Let’s add it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/movie-controller.PNG&quot; alt=&quot;Movie controller with all the CRUD operations&quot;&gt;&lt;/p&gt;
&lt;p&gt;In Movie Controller, it shows it works with &lt;em&gt; application/json &lt;/em&gt; type data, and the route is &lt;em&gt; api/Movies. &lt;/em&gt; Note that in .NET Core Api controllers inherit from &lt;em&gt; Controller &lt;/em&gt; class, not from &lt;em&gt; API Controller &lt;/em&gt; class.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/api_movies_method.PNG&quot; alt=&quot;ping to api/movies method&quot;&gt;&lt;/p&gt;
&lt;p&gt;Go to &lt;em&gt; api/movies &lt;/em&gt; method and check &lt;em&gt; Network &lt;/em&gt; tab in developer tools. method returns &lt;em&gt; 200 - OK. &lt;/em&gt; as a response. We don’t have data in movie database, Let’s try to add some data.&lt;/p&gt;
&lt;h2 id=&quot;Add-data-using-Postman&quot;&gt;&lt;a href=&quot;#Add-data-using-Postman&quot; class=&quot;headerlink&quot; title=&quot;Add data using Postman&quot;&gt;&lt;/a&gt;Add data using Postman&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/post-a-movie.PNG&quot; alt=&quot;ping to api/post a movie&quot;&gt;&lt;/p&gt;
&lt;p&gt;Postman is a tool to test your service apis. Although we can test &lt;em&gt; GET &lt;/em&gt; requests through browser, to test &lt;em&gt; POST &lt;/em&gt; requests, we need to use &lt;em&gt; Postman. &lt;/em&gt; Add a movie using Postman and retrive it using web browser.&lt;/p&gt;
&lt;p&gt;We have created a service API using .NETCore and Sql Server. Let’s try to run this same application on Ubuntu with &lt;em&gt; MySQL. &lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;Clone-your-application-in-Ubuntu&quot;&gt;&lt;a href=&quot;#Clone-your-application-in-Ubuntu&quot; class=&quot;headerlink&quot; title=&quot;Clone your application in Ubuntu&quot;&gt;&lt;/a&gt;Clone your application in Ubuntu&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/git-clone.PNG&quot; alt=&quot;Clone your application in Ubuntu&quot;&gt;&lt;/p&gt;
&lt;p&gt; Type &lt;em&gt; git clone …&lt;/em&gt; with repository url, Your project will be downloaded. Then cd into application directory and open it in visual studio code.&lt;/p&gt;
&lt;h2 id=&quot;Restore-packages-and-build-your-application&quot;&gt;&lt;a href=&quot;#Restore-packages-and-build-your-application&quot; class=&quot;headerlink&quot; title=&quot;Restore packages and build your application&quot;&gt;&lt;/a&gt;Restore packages and build your application&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/dotnet-restore-in-ubuntu.PNG&quot; alt=&quot;Restore packages and build application&quot;&gt;&lt;/p&gt;
&lt;p&gt;Restore packages defined in project.json file and Build your application. It all works fine. &lt;/p&gt;
&lt;h2 id=&quot;Let’s-try-to-run-our-application&quot;&gt;&lt;a href=&quot;#Let’s-try-to-run-our-application&quot; class=&quot;headerlink&quot; title=&quot;Let’s try to run our application&quot;&gt;&lt;/a&gt;Let’s try to run our application&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/dotnet-run-in-ubuntu.PNG&quot; alt=&quot;Run your application&quot;&gt;&lt;/p&gt;
&lt;p&gt;Let’s try to run our application without any modifications, It seems working fine. Let’s navigate to &lt;em&gt; api/values &lt;/em&gt;, It calls READ service of &lt;em&gt; Values &lt;/em&gt; service. It returns 200 - OK as response. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/read-service-in-movie-service.PNG&quot; alt=&quot;Read service in movie controller&quot;&gt;&lt;/p&gt;
&lt;p&gt;Ping to &lt;em&gt; api/movies, &lt;/em&gt; it returns an empty array, since we don’t have a database. Check the terminal and try to find any erros, It shows a &lt;em&gt; fail &lt;/em&gt; error in red. It says &lt;em&gt; Microsoft.EntityFrameworkCore.Query.Internal.SqlServerQueryCompilationContextFactory[1]&lt;br&gt; An exception occurred in the database while iterating the results of a query. System.NotSupportedException: The keyword ‘integrated security’ is not supported on this platform. at System.Data.SqlClient.SqlConnectionString..ctor(String connectionString) … &lt;/em&gt;&lt;br&gt; It says an error as &lt;em&gt; The keyword ‘integrated security’ is not supported on this platform. &lt;/em&gt; If you remember, where we have used &lt;em&gt; integrated security &lt;/em&gt;, that’s in sql server connectionString. We can’t operate with Sql server on Ubuntu. We have to install My SQL server to store data in your application. Let’s do that.&lt;/p&gt;
&lt;h2 id=&quot;Add-MySQL-connectionString&quot;&gt;&lt;a href=&quot;#Add-MySQL-connectionString&quot; class=&quot;headerlink&quot; title=&quot;Add MySQL connectionString&quot;&gt;&lt;/a&gt;Add MySQL connectionString&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/define-mysql-connectionstring.PNG&quot; alt=&quot;Define mysql connectionString&quot;&gt;&lt;/p&gt;
&lt;p&gt;Add mysql connectionString in appsetings.json file, &lt;em&gt; movieDB &lt;/em&gt; will get created in mysql server.&lt;/p&gt;
&lt;h2 id=&quot;Add-MySQL-service-in-your-application&quot;&gt;&lt;a href=&quot;#Add-MySQL-service-in-your-application&quot; class=&quot;headerlink&quot; title=&quot;Add MySQL service in your application&quot;&gt;&lt;/a&gt;Add MySQL service in your application&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/configure-my-sql-service.PNG&quot; alt=&quot;Add mysql service into your application&quot;&gt;&lt;/p&gt;
&lt;p&gt;If you remember, we added Sql service into the application when we run in winodows. In Ubuntu also same thing we have to do. Add MySQL service into your application with dbContext class. But it seems we are missing something in here.&lt;br&gt; Note that, &lt;em&gt; Microsoft.EntityframeworkCore &lt;/em&gt; has been highlighted. Your application doesn’t use that reference anymore. It’s a reference from Sql server. We have to add a reference from MySQL to proceed with this. Let’s try to add it.&lt;/p&gt;
&lt;h2 id=&quot;Add-MySQL-EFCore-reference-in-project-json-file&quot;&gt;&lt;a href=&quot;#Add-MySQL-EFCore-reference-in-project-json-file&quot; class=&quot;headerlink&quot; title=&quot;Add MySQL EFCore reference in project.json file&quot;&gt;&lt;/a&gt;Add MySQL EFCore reference in project.json file&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/add-mysql-EFCore-reference.PNG&quot; alt=&quot;Add mysql EFCore reference&quot;&gt;&lt;/p&gt;
&lt;p&gt;Add &lt;em&gt; “MySql.Data.EntityFrameworkCore” : “7.0.4-ir-191” &lt;/em&gt; reference in project.json file and restore them.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/add-mysql-reference-in-startup-class.PNG&quot; alt=&quot;Add mysql reference in Startup class&quot;&gt;&lt;/p&gt;
&lt;p&gt;Add &lt;em&gt; using MySQL.Data.EntityFrameworkCore.Extensions; &lt;/em&gt; statement in startup class, It seems works fine now.&lt;/p&gt;
&lt;p&gt;In windows with Sql server, We run migration scripts and ensure database is created. But with Ubuntu, we can’t do that. Somehow we have to ensure our database is created. Let’s give it a try.&lt;/p&gt;
&lt;h2 id=&quot;Ensure-MySQL-database-got-created&quot;&gt;&lt;a href=&quot;#Ensure-MySQL-database-got-created&quot; class=&quot;headerlink&quot; title=&quot;Ensure MySQL database got created&quot;&gt;&lt;/a&gt;Ensure MySQL database got created&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/ensure-mysql-database-got-created.PNG&quot; alt=&quot;Ensure mysql database is created&quot;&gt;&lt;/p&gt;
&lt;p&gt;Add this lines of code to ensure MySQL database got created.&lt;/p&gt;
&lt;p&gt;var optionsBuilder = new DbContextOptionsBuilder&lt;moviedbcontext&gt;();&lt;br&gt;optionsBuilder.UseMySQL(Configuration.GetConnectionString(“DefaultConnection”));&lt;/moviedbcontext&gt;&lt;/p&gt;
&lt;p&gt;var context = new MovieDbContext(optionsBuilder.Options);&lt;br&gt;context.Database.EnsureCreated();&lt;/p&gt;
&lt;h2 id=&quot;Run-your-application&quot;&gt;&lt;a href=&quot;#Run-your-application&quot; class=&quot;headerlink&quot; title=&quot;Run your application&quot;&gt;&lt;/a&gt;Run your application&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/try-to-run-your-application.PNG&quot; alt=&quot;run your application&quot;&gt;&lt;/p&gt;
&lt;p&gt;Then build and run the application, navigate to movies read service and verify it works fine. read service returns empty array. Let’s check database is created in MySQL server.&lt;/p&gt;
&lt;h2 id=&quot;View-MySQL-databases&quot;&gt;&lt;a href=&quot;#View-MySQL-databases&quot; class=&quot;headerlink&quot; title=&quot;View MySQL databases&quot;&gt;&lt;/a&gt;View MySQL databases&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/verify-database-is-created.PNG&quot; alt=&quot;Check whether your database is created&quot;&gt;&lt;/p&gt;
&lt;p&gt;run &lt;em&gt; mysql -u root -p &lt;/em&gt; command to access mysql shell, then type &lt;em&gt; show databases; &lt;/em&gt; to view all the available databases. &lt;em&gt; movieDB. &lt;/em&gt; is successfuly created.&lt;/p&gt;
&lt;h2 id=&quot;Let’s-add-some-data-into-Movie-database-in-MySQL&quot;&gt;&lt;a href=&quot;#Let’s-add-some-data-into-Movie-database-in-MySQL&quot; class=&quot;headerlink&quot; title=&quot;Let’s add some data into Movie database in MySQL&quot;&gt;&lt;/a&gt;Let’s add some data into Movie database in MySQL&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/post-a-movie-mysql.PNG&quot; alt=&quot;Add a movie into database&quot;&gt;&lt;/p&gt;
&lt;p&gt;Call POST service in movie controller and add a movie into the mysql database. Refresh read movie service, it shows available movies in your mysql database.&lt;br&gt;Connect to the mysql shell and try to view data in &lt;em&gt; Movies &lt;/em&gt; table.&lt;/p&gt;
&lt;p&gt;In this blog post, I described how to run a web api application in windows with Sqlserver. And then we tried to configure same service application on Ubuntu with MySql server. With less amount of coding we could achieve that, really cool style in .NETCore&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Let’s try to create a .NETCore application from &lt;em&gt; Visual Studio 2015 &lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/create-dotnet-core-web-application
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Create a web application with Yeoman!</title>
    <link href="http://yoursite.com/2016/09/16/Create-a-web-application-with-Yeoman/"/>
    <id>http://yoursite.com/2016/09/16/Create-a-web-application-with-Yeoman/</id>
    <published>2016-09-15T18:30:59.000Z</published>
    <updated>2016-09-18T19:27:08.433Z</updated>
    
    <content type="html">&lt;h1 id=&quot;Run-Yo-command&quot;&gt;&lt;a href=&quot;#Run-Yo-command&quot; class=&quot;headerlink&quot; title=&quot;Run Yo command&quot;&gt;&lt;/a&gt;Run Yo command&lt;/h1&gt;&lt;p&gt;First of all create a new directory and cd into it. Then run &lt;em&gt; yo &lt;/em&gt; command.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/run-yo-command.PNG&quot; alt=&quot;Yo command&quot;&gt;&lt;/p&gt;
&lt;p&gt;Run &lt;em&gt; Yo &lt;/em&gt; command, and check what happens.&lt;br&gt;It points to &lt;em&gt; Install a generator &lt;/em&gt; by default. It doesn’t point to &lt;em&gt; Run a generator, &lt;/em&gt; until we install a generator.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/install-aspnet-generator.PNG&quot; alt=&quot;install a generator&quot;&gt;&lt;/p&gt;
&lt;p&gt;search for aspnet generator in npm package management store.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/permission-issue-in-installing-generator.PNG&quot; alt=&quot;install a generator&quot;&gt;&lt;/p&gt;
&lt;p&gt;We get a permission issue when installing aspnet generator, Let’s try what yo says,  will run &lt;em&gt; npm install &lt;/em&gt; command and see what happens.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/npm-install-generattor.PNG&quot; alt=&quot;install a generator using npm install command&quot;&gt;&lt;/p&gt;
&lt;p&gt;We tried to install generator using &lt;em&gt; npm install &lt;/em&gt; command, But it shows the same error!!!!&lt;br&gt;Since this is a permission issue, will run the command with &lt;em&gt; sudo &lt;/em&gt; and check what happens.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/npm-install-generattor-as-administrator.PNG&quot; alt=&quot;install a generator as administrator&quot;&gt;&lt;/p&gt;
&lt;p&gt;When installing generator as an administrator, it installs without getting any errors.&lt;br&gt;Let’s run &lt;em&gt; Yo &lt;/em&gt; command and select a template.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/create-empty-web-application.PNG&quot; alt=&quot;create empty web application using Yo&quot;&gt;&lt;/p&gt;
&lt;p&gt;Select &lt;em&gt; aspnet &lt;/em&gt; as generator, and then select what type of application you want to create.&lt;br&gt;Select &lt;em&gt; Empty Web Application &lt;/em&gt; and give a name to it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/after-restoring-packages.PNG&quot; alt=&quot;How it looks like after restoring packages&quot;&gt;&lt;/p&gt;
&lt;p&gt;Go inside the project folder and open it in visual studio code.&lt;br&gt;In visual studio code add &lt;em&gt; .vscode &lt;/em&gt; folder and restore relevant packages. It shows solution like this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/program-cs-file.PNG&quot; alt=&quot;program.cs file &quot;&gt;&lt;/p&gt;
&lt;p&gt;In program.cs file, It shows &lt;em&gt; WebHostBuilder &lt;/em&gt; class, with cross platform &lt;em&gt; Kestrel server&lt;/em&gt; and &lt;em&gt; IIS integration &lt;/em&gt; both.&lt;br&gt;It has defined a seperate &lt;em&gt; Startup &lt;/em&gt; class, to configure the http request pipeline. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/dotnet-build-and-run.PNG&quot; alt=&quot;dotnet build and run application &quot;&gt;&lt;br&gt; Build and run .NETCore application and check terminal window,&lt;br&gt; You can see &lt;em&gt; logging &lt;/em&gt; is enabled for browser navigations.&lt;/p&gt;
&lt;p&gt; We can see complete project is created using Yeoman template generator. It includes &lt;em&gt; program.cs, &lt;/em&gt; &lt;em&gt; project.json &lt;/em&gt; and &lt;em&gt; web.config &lt;/em&gt; files.&lt;br&gt; It includes &lt;em&gt; Startup &lt;/em&gt; class to manage the http request pipeline. And also it has a &lt;em&gt; wwwroot &lt;/em&gt; folder to host our web application.&lt;br&gt; Since Yeoman is generating complete application, We don’t have to do anything manually. We can only focus on the application logic and start working on it.&lt;/p&gt;
&lt;p&gt; You can check sample code from here, &lt;a href=&quot;https://github.com/hansamaligamage/WebAppWithYeoman&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/hansamaligamage/WebAppWithYeoman&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Run-Yo-command&quot;&gt;&lt;a href=&quot;#Run-Yo-command&quot; class=&quot;headerlink&quot; title=&quot;Run Yo command&quot;&gt;&lt;/a&gt;Run Yo command&lt;/h1&gt;&lt;p&gt;First of all create a 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Install Yeoman in Ubuntu</title>
    <link href="http://yoursite.com/2016/09/15/Yeoman-go-easy-with-NETCore/"/>
    <id>http://yoursite.com/2016/09/15/Yeoman-go-easy-with-NETCore/</id>
    <published>2016-09-15T14:16:58.000Z</published>
    <updated>2016-09-28T12:45:28.171Z</updated>
    
    <content type="html">&lt;h1 id=&quot;What-is-Yeoman&quot;&gt;&lt;a href=&quot;#What-is-Yeoman&quot; class=&quot;headerlink&quot; title=&quot;What is Yeoman&quot;&gt;&lt;/a&gt;What is Yeoman&lt;/h1&gt;&lt;p&gt;Yeoman is a free open source tool. It’s more like visual studio project templates. It’s going to create a complete project with given set of tools. Yeoman has set of generators, It complies with industry best practices. Developers can easily start with their applications with specific tool set, without worrying about the setup or template of the application. Yeoman templates includes building, testing and minification in your application, So developer can focus on the logic of their application.&lt;/p&gt;
&lt;h1 id=&quot;Install-node-js&quot;&gt;&lt;a href=&quot;#Install-node-js&quot; class=&quot;headerlink&quot; title=&quot;Install node js&quot;&gt;&lt;/a&gt;Install node js&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/install-node.PNG&quot; alt=&quot;install node&quot;&gt;&lt;/p&gt;
&lt;p&gt;Install node js, before installing Yeoman. Yeoman is going to run on a node server, After installing node js check the version of it.&lt;/p&gt;
&lt;h1 id=&quot;Install-npm&quot;&gt;&lt;a href=&quot;#Install-npm&quot; class=&quot;headerlink&quot; title=&quot;Install npm&quot;&gt;&lt;/a&gt;Install npm&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/install-npm.PNG&quot; alt=&quot;install npm&quot;&gt;&lt;/p&gt;
&lt;p&gt;When we install nodejs, npm is also comes along with it. If you start installing npm before installing node js, follow like this.&lt;br&gt;npm is a package manager for Yeoman, It’s going to download any dependencies in your application, You don’t want to manually download and install it.&lt;/p&gt;
&lt;h1 id=&quot;Let’s-try-to-install-Yeoman&quot;&gt;&lt;a href=&quot;#Let’s-try-to-install-Yeoman&quot; class=&quot;headerlink&quot; title=&quot;Let’s try to install Yeoman!!&quot;&gt;&lt;/a&gt;Let’s try to install Yeoman!!&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/install-yo.PNG&quot; alt=&quot;install Yeoman&quot;&gt;&lt;/p&gt;
&lt;p&gt;Run Yo installer command,&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/yo-error.PNG&quot; alt=&quot;Yeoman permission issue when installing&quot;&gt;&lt;/p&gt;
&lt;p&gt;But it doesn’t seem work, We get an ugly permission issue, Let’s try to fix this.&lt;br&gt;It says &lt;em&gt; permission denied &lt;/em&gt; for some paths. It suggests to run installer command as &lt;em&gt; root/Administrator, &lt;/em&gt; Let’s try out that. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/install-yo-as-administrator.PNG&quot; alt=&quot;Install Yeoman as administrator&quot;&gt;&lt;/p&gt;
&lt;p&gt;It looks perfectly fine, when we use &lt;em&gt; sudo &lt;/em&gt; command with yo installer command.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/check-yo-is-installed-properly.PNG&quot; alt=&quot;check whether Yeoman is installed properly&quot;&gt;&lt;/p&gt;
&lt;p&gt;We can check whether Yeoman is installed properly using &lt;em&gt; Yo &lt;/em&gt; command.&lt;br&gt;We have successfully installed Yeoman. Now we don’t want to manualy create .NETCore applications. We can use generated templates using Yo. Let’s start using Yeoman templates.  &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;What-is-Yeoman&quot;&gt;&lt;a href=&quot;#What-is-Yeoman&quot; class=&quot;headerlink&quot; title=&quot;What is Yeoman&quot;&gt;&lt;/a&gt;What is Yeoman&lt;/h1&gt;&lt;p&gt;Yeoman is a free open 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Listen to me in http://localhost:5000/ with .NETCore on Ubuntu</title>
    <link href="http://yoursite.com/2016/09/15/Web-Application-in-NETCore-Ubuntu/"/>
    <id>http://yoursite.com/2016/09/15/Web-Application-in-NETCore-Ubuntu/</id>
    <published>2016-09-15T03:39:42.000Z</published>
    <updated>2016-09-18T19:18:55.456Z</updated>
    
    <content type="html">&lt;p&gt;In my previous post, We saw how to write a console application in .NETCore. Let’s see how to write a web application in this post.&lt;/p&gt;
&lt;h1 id=&quot;Create-a-new-project&quot;&gt;&lt;a href=&quot;#Create-a-new-project&quot; class=&quot;headerlink&quot; title=&quot;Create a new project&quot;&gt;&lt;/a&gt;Create a new project&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/web-create-a-new-project.PNG&quot; alt=&quot;Create a new project&quot;&gt;&lt;/p&gt;
&lt;p&gt;Create a new project and open it in Visual Studio Code.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/webhost-builder.PNG&quot; alt=&quot;Initiate a WebHost Builder object&quot;&gt;&lt;/p&gt;
&lt;p&gt;Create a &lt;em&gt; WebHostBuilder &lt;/em&gt; instance, since we need a server to run our web application, It’s little bit different to a Console application.&lt;br&gt;We get an error here, Some packages seem to be missing, ok!!! First of all let’s add a server to run our application.&lt;/p&gt;
&lt;h1 id=&quot;Add-Kestrel-to-our-package-list&quot;&gt;&lt;a href=&quot;#Add-Kestrel-to-our-package-list&quot; class=&quot;headerlink&quot; title=&quot;Add Kestrel to our package list&quot;&gt;&lt;/a&gt;Add Kestrel to our package list&lt;/h1&gt;&lt;p&gt; &lt;img src=&quot;/images/add-kestrel-server.PNG&quot; alt=&quot;Add Kestrel to our package list &quot;&gt;&lt;/p&gt;
&lt;p&gt;Add &lt;em&gt; Kestrel &lt;/em&gt; server into &lt;em&gt; project.json &lt;/em&gt; file and restore the package.&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;/images/add-relevant-using-statement-to-kestrel-server.PNG&quot; alt=&quot;Add relevant using statement for kestrel server&quot;&gt;&lt;/p&gt;
&lt;p&gt;In program.cs file, Add relevant using statement. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/run-web-host-builder.PNG&quot; alt=&quot;run WebHostBuilder&quot;&gt;&lt;/p&gt;
&lt;p&gt;When initiating a &lt;em&gt; WebHostBuilder, &lt;/em&gt; It turns your console application into a web application.&lt;/p&gt;
&lt;p&gt;Now, Ask the host to build using &lt;em&gt; Build &lt;/em&gt; method, and run the webhost. When hit on &lt;em&gt; Run &lt;/em&gt; method, It’s going to give a signal to the host to listen on a port and start accepting http traffic.&lt;/p&gt;
&lt;h1 id=&quot;Let’s-run-and-see-the-changes&quot;&gt;&lt;a href=&quot;#Let’s-run-and-see-the-changes&quot; class=&quot;headerlink&quot; title=&quot;Let’s run and see the changes&quot;&gt;&lt;/a&gt;Let’s run and see the changes&lt;/h1&gt;&lt;p&gt; &lt;img src=&quot;/images/run-web-application.PNG&quot; alt=&quot;run web application and see what has happened&quot;&gt;&lt;/p&gt;
&lt;p&gt; When we run our application, It gives an error!!!!&lt;br&gt; It says we haven’t provided a service to startup the application. It means we haven’t mentioned we want to use Kestrel or not when starting our application. Let’s check how we can start our application with kestrel server,&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/web-output.PNG&quot; alt=&quot;run web application and see what has happened&quot;&gt;&lt;/p&gt;
&lt;p&gt;In here we asked &lt;em&gt; Kestrel &lt;/em&gt; to accept a http request and turn it into a http context. In configure, we accept an &lt;em&gt; Application Builder &lt;/em&gt; instance, it’s going to perform some actions in our application.&lt;br&gt;When hit on &lt;em&gt; app.Run(), &lt;/em&gt; It’s going to add a terminal to the http request pipeline. Inside &lt;em&gt; app.Run() &lt;/em&gt; method, we pass an &lt;em&gt; http context &lt;/em&gt; object kestrel has created. &lt;/p&gt;
&lt;p&gt;In the terminal window, It shows &lt;em&gt; Hello World - web &lt;/em&gt;.&lt;br&gt;Then it shows &lt;em&gt; Hosting Environment &lt;/em&gt; as &lt;em&gt; production.&lt;/em&gt;, default hosting environment for a .NETCore application.&lt;br&gt;Then it shows &lt;em&gt; Content root path &lt;/em&gt; of our application,&lt;br&gt;Our web project listen into &lt;em&gt; &lt;a href=&quot;http://localhost:5000/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://localhost:5000/&lt;/a&gt; &lt;/em&gt; which is default url and the default port of our application.&lt;/p&gt;
&lt;p&gt;You can download code sample from here, &lt;a href=&quot;https://github.com/hansamaligamage/WebAppin.NETCore&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/hansamaligamage/WebAppin.NETCore&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;In my previous post, We saw how to write a console application in .NETCore. Let’s see how to write a web application in this post.&lt;/p&gt;
&lt;h
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World in .NETCore Ubuntu</title>
    <link href="http://yoursite.com/2016/09/15/Hello-World-in-NETCore-Ubuntu/"/>
    <id>http://yoursite.com/2016/09/15/Hello-World-in-NETCore-Ubuntu/</id>
    <published>2016-09-15T03:31:57.000Z</published>
    <updated>2016-09-18T19:10:44.395Z</updated>
    
    <content type="html">&lt;p&gt;Let’s start our first application on .NETCore - Ubuntu&lt;/p&gt;
&lt;h1 id=&quot;Create-a-new-project&quot;&gt;&lt;a href=&quot;#Create-a-new-project&quot; class=&quot;headerlink&quot; title=&quot;Create a new project&quot;&gt;&lt;/a&gt;Create a new project&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/create-a-new-project.PNG&quot; alt=&quot;Create a new project&quot;&gt;&lt;/p&gt;
&lt;p&gt;Create a folder in your desktop, &lt;em&gt; myprojects &lt;/em&gt;, go inside of it and create a new project using &lt;em&gt; dotnet new &lt;/em&gt; command.&lt;br&gt;You can see &lt;em&gt; Program.cs &lt;/em&gt; and &lt;em&gt; project.json &lt;/em&gt; file is created. To build our first project in .NETCore, Let’s install &lt;em&gt; Visual Studio Code &lt;/em&gt; editor.&lt;/p&gt;
&lt;h1 id=&quot;Install-Visual-Studio-Code&quot;&gt;&lt;a href=&quot;#Install-Visual-Studio-Code&quot; class=&quot;headerlink&quot; title=&quot;Install Visual Studio Code&quot;&gt;&lt;/a&gt;Install Visual Studio Code&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/download-visual-studio-code.PNG&quot; alt=&quot;Install Visual Studio Code&quot;&gt;&lt;/p&gt;
&lt;p&gt;Download correct version of Visual Studio Code relevant to Ubuntu and install it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/open-project-in-visual-studio-code.PNG&quot; alt=&quot;Open a project in Visual Studio Code&quot;&gt;&lt;/p&gt;
&lt;p&gt;Go to your project location and open your project in visual studio code. It shows a message to install a extension. Extensions allow you to add languages, debuggers and tools to your development environment, Click on &lt;em&gt; Show Recommendations &lt;/em&gt; to view recommended extensions.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/visual-studio-code-extensions.PNG&quot; alt=&quot;Visual Studio Code Extensions&quot;&gt;&lt;/p&gt;
&lt;p&gt;Select &lt;em&gt; C# powered by Omnisharp &lt;/em&gt;, since We are using C# code in .NETCore. It provides intellicense for .NET. Omnisharp provides a set of tooling and libraries to IDEs like Visual Studio Code, Sublime, Atom, Emacs, Vim and Brackets. After installing C# extension, enable it.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/program-cs.PNG&quot; alt=&quot;program.cs file&quot;&gt;&lt;/p&gt;
&lt;p&gt;program.cs file shows entry point to the application as usual.&lt;/p&gt;
&lt;h1 id=&quot;project-json-File&quot;&gt;&lt;a href=&quot;#project-json-File&quot; class=&quot;headerlink&quot; title=&quot;project.json File&quot;&gt;&lt;/a&gt;project.json File&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/project-json.PNG&quot; alt=&quot;project.json file&quot;&gt;&lt;/p&gt;
&lt;p&gt;project.json file shows nuget dependencies required to build the application.&lt;/p&gt;
&lt;p&gt;Let’s see what is the meaning of these attributes in &lt;em&gt; project.json &lt;/em&gt; file&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; version”: “1.0.0-* &lt;/strong&gt; specifies version of the .NETCore, It says version should starts with 1.0.0&lt;br&gt;&lt;strong&gt; buildOptions &lt;/strong&gt; defines how the project should be built.&lt;br&gt;&lt;strong&gt; dependencies &lt;/strong&gt; lists all the dependencies in your application.&lt;br&gt;&lt;strong&gt; frameworks &lt;/strong&gt; defines target framework that will be used with specifies dependencies.&lt;br&gt;&lt;strong&gt; imports &lt;/strong&gt; defines where our application runs, When we add &lt;strong&gt; dnxcore50 &lt;/strong&gt;, it says we are running in Core CLR on the dnx.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/build-debug-assets.PNG&quot; alt=&quot;build and debug assets&quot;&gt;&lt;/p&gt;
&lt;p&gt;You can see a message to install build and debug assets, install them. And another message to restore the packages in project.json, restore them as well.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/after-restoring-packages-and-build-debug-folder.PNG&quot; alt=&quot;After adding assets folder and restoring packages&quot;&gt;&lt;/p&gt;
&lt;p&gt;After adding assets folder, you can see .vscode folder with &lt;em&gt; launch.json &lt;/em&gt; and &lt;em&gt; tasks.json &lt;/em&gt; files. All the build errors are gone. Check the output window, It shows packages restoring is completed.&lt;/p&gt;
&lt;h1 id=&quot;project-lock-json-File&quot;&gt;&lt;a href=&quot;#project-lock-json-File&quot; class=&quot;headerlink&quot; title=&quot;project.lock.json File&quot;&gt;&lt;/a&gt;project.lock.json File&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/project-lock-json.PNG&quot; alt=&quot;project-lock.json file&quot;&gt;&lt;/p&gt;
&lt;p&gt;After packages restoring is completed, &lt;em&gt; project-lock.json &lt;/em&gt; file has been added into the solution.&lt;br&gt;It’s going to capture entire dependency graph that your application depends on. In &lt;em&gt; project.json &lt;/em&gt; file, you define the top level dependencies, more detailed level description is available in &lt;em&gt; project-lock.json &lt;/em&gt; file.&lt;/p&gt;
&lt;h1 id=&quot;launch-json-File&quot;&gt;&lt;a href=&quot;#launch-json-File&quot; class=&quot;headerlink&quot; title=&quot;launch.json File&quot;&gt;&lt;/a&gt;launch.json File&lt;/h1&gt;&lt;p&gt; &lt;img src=&quot;/images/launch-json.PNG&quot; alt=&quot;launch.json file&quot;&gt;&lt;/p&gt;
&lt;p&gt;This file is going to confgure debugging and running in the application. In this example, It’s going to launch .NETCore console or even we can attatch to .NETCore console.&lt;/p&gt;
&lt;h1 id=&quot;tasks-json-File&quot;&gt;&lt;a href=&quot;#tasks-json-File&quot; class=&quot;headerlink&quot; title=&quot;tasks.json File&quot;&gt;&lt;/a&gt;tasks.json File&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/tasks-json.PNG&quot; alt=&quot;tasks.json file&quot;&gt;&lt;/p&gt;
&lt;p&gt;This file is used to automate tasks like building, packaging, testing and deploying softwares. In this example, It has define a &lt;em&gt; build &lt;/em&gt; task, and specified to run as a build command.&lt;/p&gt;
&lt;h1 id=&quot;Hello-World-on-the-terminal&quot;&gt;&lt;a href=&quot;#Hello-World-on-the-terminal&quot; class=&quot;headerlink&quot; title=&quot;Hello World on the terminal&quot;&gt;&lt;/a&gt;Hello World on the terminal&lt;/h1&gt;&lt;p&gt; &lt;img src=&quot;/images/output-of-the-project.PNG&quot; alt=&quot;Hello World on the terminal&quot;&gt;&lt;/p&gt;
&lt;p&gt;That’s all we want to know about a .NETCore application, Let’s see the output of our first application, When we run &lt;em&gt; dotnet run &lt;/em&gt; command, It shows the output of the application.&lt;/p&gt;
&lt;p&gt;I created a github repository, You can check it from here, &lt;a href=&quot;https://github.com/hansamaligamage/HelloWorld&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/hansamaligamage/HelloWorld&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Let’s start our first application on .NETCore - Ubuntu&lt;/p&gt;
&lt;h1 id=&quot;Create-a-new-project&quot;&gt;&lt;a href=&quot;#Create-a-new-project&quot; class=&quot;headerlin
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Install .NETCore on Ubuntu</title>
    <link href="http://yoursite.com/2016/09/11/Install-NETCore-on-Ubuntu/"/>
    <id>http://yoursite.com/2016/09/11/Install-NETCore-on-Ubuntu/</id>
    <published>2016-09-11T17:59:23.000Z</published>
    <updated>2016-09-14T03:24:12.328Z</updated>
    
    <content type="html">&lt;p&gt;In .NET framework history, .NET have its full framework from .NET 1.0 to .NET 4.6.2, specially created for windows platform. Latest version of .NET framework is .NET 4.6.2 up to now, In the end of june Microsoft released a new .NET framework called .NET Core for Windows, Linux and Mac. A great feature of .NET core is, a solution build on windows can be run and modify in a linux based environment. We can build an application on winows, and can host it in a Linux server, how cool is that.&lt;/p&gt;
&lt;h1 id=&quot;Add-dotnet-apt-get-feed&quot;&gt;&lt;a href=&quot;#Add-dotnet-apt-get-feed&quot; class=&quot;headerlink&quot; title=&quot;Add dotnet apt-get feed&quot;&gt;&lt;/a&gt;Add dotnet apt-get feed&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/add-dotnet-apt-get-feed.PNG&quot; alt=&quot;apt-get Feed&quot;&gt;&lt;/p&gt;
&lt;p&gt;First of all, setup the apt-get feed and update it.&lt;/p&gt;
&lt;p&gt;apt-get is a free package manager program. It works with Ubuntu’s APT (Advanced Packaging Tool). Using that command line program, We can Install new packages, remove or upgrade packages.&lt;/p&gt;
&lt;p&gt;for Ubuntu 16.04, run these commands,&lt;br&gt;    &lt;strong&gt; sudo sh -c ‘echo “deb [arch=amd64] &lt;a href=&quot;https://apt-mo.trafficmanager.net/repos/dotnet-release/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://apt-mo.trafficmanager.net/repos/dotnet-release/&lt;/a&gt; xenial main” &amp;gt; /etc/apt/sources.list.d/dotnetdev.list’ &lt;/strong&gt;&lt;br&gt;    &lt;strong&gt; sudo apt-key adv –keyserver apt-mo.trafficmanager.net –recv-keys 417A0893 &lt;/strong&gt;&lt;br&gt;Then update apt-get feed Using following command, &lt;strong&gt; sudo apt-get update &lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;Install-NETCore-top-of-apt-get&quot;&gt;&lt;a href=&quot;#Install-NETCore-top-of-apt-get&quot; class=&quot;headerlink&quot; title=&quot;Install .NETCore top of apt-get&quot;&gt;&lt;/a&gt;Install .NETCore top of apt-get&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/install-dotnet-core.PNG&quot; alt=&quot;Install .NETCore&quot;&gt;&lt;/p&gt;
&lt;p&gt;Install .NETCore using following command, &lt;strong&gt; sudo apt-get install dotnet-dev-1.0.0-preview2-003121 &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/check-dotnet-installation.PNG&quot; alt=&quot;run dotnet command&quot;&gt;&lt;/p&gt;
&lt;p&gt;Check whether .NETCore is properly installed using &lt;strong&gt; dotnet &lt;/strong&gt; command. It shows .NETCore version as 1.0.1&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;In .NET framework history, .NET have its full framework from .NET 1.0 to .NET 4.6.2, specially created for windows platform. Latest versi
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Install Ubuntu in a Virtual Machine</title>
    <link href="http://yoursite.com/2016/08/27/Install-Ubuntu-in-VM/"/>
    <id>http://yoursite.com/2016/08/27/Install-Ubuntu-in-VM/</id>
    <published>2016-08-27T05:20:23.000Z</published>
    <updated>2016-09-11T17:31:03.543Z</updated>
    
    <content type="html">&lt;p&gt;Let’s try to create a virtual machine with Ubuntu. Later in these post series, will try to install .NET Core into Ubuntu.&lt;/p&gt;
&lt;h1 id=&quot;Ubuntu-run-in-a-VM&quot;&gt;&lt;a href=&quot;#Ubuntu-run-in-a-VM&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu run in a VM&quot;&gt;&lt;/a&gt;Ubuntu run in a VM&lt;/h1&gt;&lt;p&gt;Let’s see how we can run Ubuntu inside a virtual machine.&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;/images/create-a-vm.PNG&quot; alt=&quot;Create a virtual machine with Ubuntu&quot;&gt;&lt;/p&gt;
&lt;p&gt;Select &lt;em&gt; Create a new Virtual Machine &lt;/em&gt;, then &lt;em&gt; New Virtual Machine Wizard &lt;/em&gt; appears. in this example I selected a disc image of ubuntu (.iso file) or else you can install a operating system using a dvd. Click on &lt;em&gt; Next &lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/personel-info-in-linux.PNG&quot; alt=&quot;Personnel information&quot;&gt;&lt;/p&gt;
&lt;p&gt;Enter your personnel information, a username and a password for ubuntu.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/name-virtual-machine.PNG&quot; alt=&quot;Name the virtual machine&quot;&gt;&lt;/p&gt;
&lt;p&gt;Give a name for the virtual machine and install location.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/specify-disk-capacity.PNG&quot; alt=&quot;Specify the disk capacity&quot;&gt;&lt;/p&gt;
&lt;p&gt;Specify the disk capacity and virtual hard disk information&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/customise-hardware.PNG&quot; alt=&quot;Customise hardware in the virtual machine&quot;&gt;&lt;/p&gt;
&lt;p&gt;Customise the hardware if you want, You can change name of the virtual machine, location, hard disk size, memory etc.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/installation-of-ubuntu.PNG&quot; alt=&quot;Installing Ubuntu in a vm&quot;&gt;&lt;/p&gt;
&lt;p&gt;Installation of Ubuntu will take few minutes.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/ubuntu-is-ready.PNG&quot; alt=&quot;Ubuntu is ready&quot;&gt;&lt;/p&gt;
&lt;p&gt;Ubuntu in vm is ready, &lt;/p&gt;
&lt;h1 id=&quot;Install-VMware-tools&quot;&gt;&lt;a href=&quot;#Install-VMware-tools&quot; class=&quot;headerlink&quot; title=&quot;Install VMware tools&quot;&gt;&lt;/a&gt;Install VMware tools&lt;/h1&gt;&lt;p&gt;We are going to install VMware tools. We can’t go full screen mode, If we haven’t install VMware tools.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/VMware-tools-installer.PNG&quot; alt=&quot;VMware tools installer&quot;&gt;&lt;/p&gt;
&lt;p&gt;Download VMware tools, and Let’s try to install it.&lt;/p&gt;
&lt;p&gt;I downloaded VMware tools - 10.0.6,&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/extract-VMware-tools-installer.PNG&quot; alt=&quot;Extract VMware installer&quot;&gt;&lt;/p&gt;
&lt;p&gt;Right click on VMware tools zip file and select &lt;em&gt; Extract To &lt;/em&gt; option.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/select-extract-location-as-desktop.PNG&quot; alt=&quot;Select extract location as Desktop&quot;&gt;&lt;/p&gt;
&lt;p&gt;Select &lt;em&gt; Desktop &lt;/em&gt; as extract location, and press on &lt;em&gt; Extract &lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/go-inside-VMware-tools.PNG&quot; alt=&quot;cd into VMware installer&quot;&gt;&lt;/p&gt;
&lt;p&gt;Go inside VMware installer using &lt;em&gt; cd &lt;/em&gt; command.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/run-VMware-installer.PNG&quot; alt=&quot;run VMware installer&quot;&gt;&lt;/p&gt;
&lt;p&gt;Run VMware installer, using above command with &lt;em&gt; sudo &lt;/em&gt;, sudo command means, you run this installer as a super user. &lt;em&gt; superuser do &lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Now you can go to full screen mode.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/check-ubuntu-version.PNG&quot; alt=&quot;Check Ubuntu version from terminal&quot;&gt;&lt;/p&gt;
&lt;p&gt;Open a terminal and check Ubuntu version, We have succesfully Installed Ubuntu in a virtual machine.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Let’s try to create a virtual machine with Ubuntu. Later in these post series, will try to install .NET Core into Ubuntu.&lt;/p&gt;
&lt;h1 id=&quot;Ubu
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>How to generate a license key for your system</title>
    <link href="http://yoursite.com/2016/07/29/How-to-generate-a-license-key-for-your-system/"/>
    <id>http://yoursite.com/2016/07/29/How-to-generate-a-license-key-for-your-system/</id>
    <published>2016-07-28T18:30:00.000Z</published>
    <updated>2016-09-18T18:21:56.342Z</updated>
    
    <content type="html">&lt;p&gt;When a web application develops, we need to protect user passwords from security attacks. When your application operates on a license key, we need to validate the license.&lt;br&gt;In todays world providing security to your system is bit crucial. We have to face malicious scripts, security threats and unwanted attacks in out there. Let’s see how we can prevent those kind of attacks.&lt;/p&gt;
&lt;h1 id=&quot;Password-Hashing&quot;&gt;&lt;a href=&quot;#Password-Hashing&quot; class=&quot;headerlink&quot; title=&quot;Password Hashing&quot;&gt;&lt;/a&gt;Password Hashing&lt;/h1&gt;&lt;p&gt;In hashing, we are going to convert password string into a byte array. Hashing is a one way funtion, we can’t reverse it. We can see many hashing algorithms available.&lt;br&gt;Let’s say we hashed the users password and stored in our database. When user second time logs in, we have to verify entered password is correct. What we can do is, we can hash the entered text into password field and compare it with the hashed value from the database. Since Hashing is a one way function, we can’t decrypt and retrieve original text.&lt;/p&gt;
&lt;h1 id=&quot;Invalid-username-or-password&quot;&gt;&lt;a href=&quot;#Invalid-username-or-password&quot; class=&quot;headerlink&quot; title=&quot;Invalid username or password&quot;&gt;&lt;/a&gt;Invalid username or password&lt;/h1&gt;&lt;p&gt;When user enters wrong password, System should not let the user know it’s &lt;em&gt; Invalid password &lt;/em&gt;, instead of it should tell &lt;em&gt; Invalid username or password &lt;/em&gt;. Then if hacker tries to login into your system, he doesn’t know whether username or password got wrong.&lt;/p&gt;
&lt;h1 id=&quot;Hash-Functions&quot;&gt;&lt;a href=&quot;#Hash-Functions&quot; class=&quot;headerlink&quot; title=&quot;Hash Functions&quot;&gt;&lt;/a&gt;Hash Functions&lt;/h1&gt;&lt;p&gt;SHA1, MD5 are popular hashing algorithms. SHA1 got inspired from MD algorithms and created SHA algorithms. From these two algorithms, better to use SHA1, Because it’s high secure than MD5.  MD5 is going to convert a string into 128 bits. But SHA1 convert a string into 160 bits. In MD5 less no of operations required to crack the message, when compared to SHA1. But MD is faster than SHA1. However it’s better to use SHA1 algorithm instead of MD5, since MD5 can be broken easily.&lt;/p&gt;
&lt;h1 id=&quot;Hashes-can-be-cracked-easily&quot;&gt;&lt;a href=&quot;#Hashes-can-be-cracked-easily&quot; class=&quot;headerlink&quot; title=&quot;Hashes can be cracked easily&quot;&gt;&lt;/a&gt;Hashes can be cracked easily&lt;/h1&gt;&lt;p&gt;Hackers can guess passwords and simply hash them with a hashing algorithm and try it in your system. It takes few seconds to generate a hash. Within a limited amount of time, your passwords can be cracked easily. These type of guessing password and hashing is called as Dictionary attacks and Brute force attacks.&lt;br&gt;In dictionary attacks, it uses a file with some words. These words can be extracted from a database or else from set of paragraphs. Most hackers guess passwords from common terms like, hello, hellow, he11o3 etc. They take a string and try to replace letters in it, like hello, he33o, heiio, etc. Then these words are hashed and use against the password hash.&lt;br&gt;Brute Force attacks going to try out every possible of character combinations to a certain string length. It’s a very expensive computational process, But eventually it’s going to find out your password! That’s why we need lenghtier passwords, So it will take long time to crack your passwords.&lt;br&gt;By hashing your passwords, We can’t prevent Dictionary attacks or Brute force attacks, But we can minimize them.&lt;br&gt;While Dictionary attacks and Brute force attacks are time consuming, Hackers has another kid in their block, It’s Lookup Table. In Lookup table, It’s going to precompute the hashes of passwords and used to store them in a dictionary file.&lt;br&gt;So hundrends of guesses can be done in a second. It’s a very effective method to crack your passwords.&lt;br&gt;Rainbow Tables, Beware guys, it can crack any 8 characters lengthy MD5 password. Rainbow table is same as Lookup table. In here hash cracking speed is slower, compared to lookup table. But lookup table size is smaller, so more hashes can be stored in the same space. So Rainbow tables are more effective than Lookup tables.&lt;/p&gt;
&lt;h1 id=&quot;Salted-Password-Hashing&quot;&gt;&lt;a href=&quot;#Salted-Password-Hashing&quot; class=&quot;headerlink&quot; title=&quot;Salted Password Hashing&quot;&gt;&lt;/a&gt;Salted Password Hashing&lt;/h1&gt;&lt;p&gt;If we use a salt with password hashing, It’s impossible to crack your passwords through Rainbow tables and lookup tables. In lookup tables, hackers are going to hash same list of passwords and try out in your system. Let’s say two users are having same password in your system. When we hash these passwords, It’s same password hash. In Salting, we are adding a random number along with hashed password. So two users never get same salted password hash. And mind you don’t use same salt with different user passwords, don’t repeat the salting. If new user registers into your system or else change password, generate a new salt. Use a new salt for every user password. If hacker is smart enough, He may be able to crack a one or two user passwords, But not more than that. Eventhough many users have same password, Hacker will not be able to crack their passwords using a lookup table. Don’t use shorter salt, Then hacker can create a lookup table to generate every possible salt.&lt;/p&gt;
&lt;h1 id=&quot;Let’s-see-how-we-can-generate-a-license-key&quot;&gt;&lt;a href=&quot;#Let’s-see-how-we-can-generate-a-license-key&quot; class=&quot;headerlink&quot; title=&quot;Let’s see how we can generate a license key&quot;&gt;&lt;/a&gt;Let’s see how we can generate a license key&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/codesample.PNG&quot; alt=&quot;Generate a license key&quot;&gt;&lt;/p&gt;
&lt;p&gt;In this example, we are passing usernam and company code to generate a license key. Using &lt;em&gt; GenerateSalt &lt;/em&gt; method, we can generate a random number. I used to create a 32 bytes lenth salt number using &lt;em&gt; RNGCryptoServiceProvider &lt;/em&gt; class. Using &lt;em&gt; Rfc289DeriveVytes &lt;/em&gt; class we can generate a salted hashing value. Along with the generated license key, we used to store salted number as well.&lt;/p&gt;
&lt;h1 id=&quot;Let’s-see-how-we-can-validate-the-license-key&quot;&gt;&lt;a href=&quot;#Let’s-see-how-we-can-validate-the-license-key&quot; class=&quot;headerlink&quot; title=&quot;Let’s see how we can validate the license key.&quot;&gt;&lt;/a&gt;Let’s see how we can validate the license key.&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/codesample1.PNG&quot; alt=&quot;Validate the license key&quot;&gt;&lt;/p&gt;
&lt;p&gt;I used 64 byte array  as a license key and 32 byte array as a salted value. We can use &lt;em&gt; SequenceEqual &lt;/em&gt; method to compare entered license key with stored license key as above.&lt;/p&gt;
&lt;p&gt;You can find a sample application from here, &lt;a href=&quot;https://github.com/hansamaligamage/LicenseKey&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/hansamaligamage/LicenseKey&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;When a web application develops, we need to protect user passwords from security attacks. When your application operates on a license key
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>I want to run a time consuming long process in a one web request</title>
    <link href="http://yoursite.com/2016/07/21/I-want-to-run-a-time-consuming-long-process-in-a-one-request/"/>
    <id>http://yoursite.com/2016/07/21/I-want-to-run-a-time-consuming-long-process-in-a-one-request/</id>
    <published>2016-07-20T18:30:00.000Z</published>
    <updated>2016-07-20T18:51:25.074Z</updated>
    
    <content type="html">&lt;p&gt;In my application, I want to run a time consuming long process in a one web request. &lt;/p&gt;
&lt;p&gt;At the begining, I used to call a web api method to run that process. But it didn’t work. Since the process takes long time to complete its action, request is getting hanged.&lt;/p&gt;
&lt;p&gt;We can work on few options to resolve this,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We can create a windows service to run this process, It’s a seperate process from the web request. We can periodically check whether action is completed or not until action gets completed, We can install this service in our local pc or server&lt;/li&gt;
&lt;li&gt;Windows service installed in Azure worker role, If we want to host the windows service in cloud environment, we can host the service in azure worker role.&lt;/li&gt;
&lt;li&gt;We can use a seperate thread to process the log runing action&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Seperate-Background-worker-thread&quot;&gt;&lt;a href=&quot;#Seperate-Background-worker-thread&quot; class=&quot;headerlink&quot; title=&quot;Seperate Background worker thread&quot;&gt;&lt;/a&gt;Seperate Background worker thread&lt;/h2&gt;&lt;p&gt;In my solution, I used to create a background worker process to handle the long running task.&lt;/p&gt;
&lt;h2 id=&quot;How-my-code-looks-like&quot;&gt;&lt;a href=&quot;#How-my-code-looks-like&quot; class=&quot;headerlink&quot; title=&quot;How my code looks like&quot;&gt;&lt;/a&gt;How my code looks like&lt;/h2&gt;&lt;p&gt;If we have to use a seperate thread to run a time consuming action, We can use Web backgrounder third party package. It’s going to run a background process in specific intervals. When the task gets completed, it’s going to automatically kill the background process.&lt;br&gt;Let’s see the code in action!!!&lt;/p&gt;
&lt;h2 id=&quot;Install-Web-background-worker&quot;&gt;&lt;a href=&quot;#Install-Web-background-worker&quot; class=&quot;headerlink&quot; title=&quot;Install Web background worker&quot;&gt;&lt;/a&gt;Install Web background worker&lt;/h2&gt;&lt;p&gt;First of all, install the web background worker third party library into the project.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/installBackgroundworker.PNG&quot; alt=&quot;Background worker installation&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Background-worker-implementation&quot;&gt;&lt;a href=&quot;#Background-worker-implementation&quot; class=&quot;headerlink&quot; title=&quot;Background worker implementation&quot;&gt;&lt;/a&gt;Background worker implementation&lt;/h2&gt;&lt;p&gt;This code snippet shows how to initialise a job and how to perform a action on it,&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/backgroundworker.PNG&quot; alt=&quot;Background worker as in library&quot;&gt;&lt;/p&gt;
&lt;p&gt;I refered to the above code snippet and created a specific worker thread according to my requirements.&lt;br&gt;actual implementation of worker thread is shown below. Worker class should inherit from &lt;em&gt;IDisposable&lt;/em&gt; interface.&lt;br&gt;In the constructor of the worker class, specify the time interval and then call long running action in a seperate thread.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/actualWork.PNG&quot; alt=&quot;Background worker&quot;&gt;&lt;/p&gt;
&lt;p&gt;Dispose() method is getting called when process is completed.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/disposeMethod.PNG&quot; alt=&quot;Dispose method&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Web-api-controller-implementation&quot;&gt;&lt;a href=&quot;#Web-api-controller-implementation&quot; class=&quot;headerlink&quot; title=&quot;Web api controller implementation&quot;&gt;&lt;/a&gt;Web api controller implementation&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/controller.PNG&quot; alt=&quot;default methods&quot;&gt;&lt;/p&gt;
&lt;p&gt;I call this worker process inside a web api controller. Create a private static variable and initialise it with worker class constructor.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;note : I added log messages to identify starting point and end point of the worker process, Here is a sample of that log.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/log.PNG&quot; alt=&quot;log file&quot;&gt;&lt;/p&gt;
&lt;p&gt;Until the task is getting completed, worker thread runs. It’s going to complete the process in second interval. When the task is completed, it’s going to dispose the worker thread.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;In my application, I want to run a time consuming long process in a one web request. &lt;/p&gt;
&lt;p&gt;At the begining, I used to call a web api me
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Schedule your tasks with a windows service</title>
    <link href="http://yoursite.com/2016/07/19/Easy-steps-to-create-a-windows-service/"/>
    <id>http://yoursite.com/2016/07/19/Easy-steps-to-create-a-windows-service/</id>
    <published>2016-07-18T18:30:00.000Z</published>
    <updated>2016-09-18T18:24:47.132Z</updated>
    
    <content type="html">&lt;p&gt;If you want to schedule something to run or your program takes long time to process, Sometimes we may have to create a seperate service application,&lt;br&gt;What i happened to write this post is, My client wanted me to write an application to send emails in specific time periods, So to achieve that I thought of writing a windows service application.&lt;br&gt;We can install this service in your server or local computer and configure it to run on intervals using a timer. Let’s start coding.&lt;/p&gt;
&lt;h2 id=&quot;Create-a-Windows-service&quot;&gt;&lt;a href=&quot;#Create-a-Windows-service&quot; class=&quot;headerlink&quot; title=&quot;Create a Windows service&quot;&gt;&lt;/a&gt;Create a Windows service&lt;/h2&gt;&lt;p&gt;When we create a windows service from visual studio, It gives us a service class with constructor method, OnStart and OnStop methods as follows.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/defaultMethods.PNG&quot; alt=&quot;default methods&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Scheduling-the-task-with-a-timer&quot;&gt;&lt;a href=&quot;#Scheduling-the-task-with-a-timer&quot; class=&quot;headerlink&quot; title=&quot;Scheduling the task with a timer&quot;&gt;&lt;/a&gt;Scheduling the task with a timer&lt;/h2&gt;&lt;p&gt;I need to periodically perform a task, for that i need a timer component, We can add a timer into our service design from toolbox&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/timer.PNG&quot; alt=&quot;Adding a timer&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Fill-up-OnStart-method&quot;&gt;&lt;a href=&quot;#Fill-up-OnStart-method&quot; class=&quot;headerlink&quot; title=&quot;Fill up OnStart method&quot;&gt;&lt;/a&gt;Fill up OnStart method&lt;/h2&gt;&lt;p&gt;we need to initialise timer component inside the OnStart method, then I set timer interval and added a elapsed event to track each interval.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/onStartMethod.PNG&quot; alt=&quot;onStart method&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Actual-scheduling-done-in-here&quot;&gt;&lt;a href=&quot;#Actual-scheduling-done-in-here&quot; class=&quot;headerlink&quot; title=&quot;Actual scheduling done in here&quot;&gt;&lt;/a&gt;Actual scheduling done in here&lt;/h2&gt;&lt;p&gt;inside timer elapsed event, actual task is going to run. elapsed event is called for each 2 minutes according to this code sample&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/timerElapsd.PNG&quot; alt=&quot;timer Elapsed method&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;How-to-stop-the-execution&quot;&gt;&lt;a href=&quot;#How-to-stop-the-execution&quot; class=&quot;headerlink&quot; title=&quot;How to stop the execution&quot;&gt;&lt;/a&gt;How to stop the execution&lt;/h2&gt;&lt;p&gt;to stop the execution, OnStop event is used.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/stopEvent.PNG&quot; alt=&quot;stop event&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;How-to-install-the-windows-service&quot;&gt;&lt;a href=&quot;#How-to-install-the-windows-service&quot; class=&quot;headerlink&quot; title=&quot;How to install the windows service&quot;&gt;&lt;/a&gt;How to install the windows service&lt;/h2&gt;&lt;p&gt;Before installing the service in your pc, we need to create a installer class,&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/installer.PNG&quot; alt=&quot;Installer class&quot;&gt;&lt;/p&gt;
&lt;p&gt;Add installer class as shown above&lt;/p&gt;
&lt;h2 id=&quot;Installer-Class&quot;&gt;&lt;a href=&quot;#Installer-Class&quot; class=&quot;headerlink&quot; title=&quot;Installer Class&quot;&gt;&lt;/a&gt;Installer Class&lt;/h2&gt;&lt;p&gt;in Installer class, we need to give a service name, so we can identify the service by its name. &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/installerCode.PNG&quot; alt=&quot;Installer class code&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Let’s-install-the-service&quot;&gt;&lt;a href=&quot;#Let’s-install-the-service&quot; class=&quot;headerlink&quot; title=&quot;Let’s install the service&quot;&gt;&lt;/a&gt;Let’s install the service&lt;/h2&gt;&lt;p&gt;service is getting created after we build the application. we can find the .exe file in the bin folder. But we can’t install the service by double clicking on it&lt;br&gt;we  have to install it to the local pc or server&lt;/p&gt;
&lt;h2 id=&quot;InstallUtil&quot;&gt;&lt;a href=&quot;#InstallUtil&quot; class=&quot;headerlink&quot; title=&quot;InstallUtil&quot;&gt;&lt;/a&gt;InstallUtil&lt;/h2&gt;&lt;p&gt;InstallUtil.exe is used to install/uninstall services in local machine or server. We can run installUtil command from Developer command prompt,&lt;br&gt;type InstallUtil.exe with full path to the service exe file.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/Installutil.PNG&quot; alt=&quot;Installutil&quot;&gt;&lt;/p&gt;
&lt;p&gt;But this doesn’t going to install the service, It throws an error.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/errorInstallUtil.PNG&quot; alt=&quot;Installutil permission issue&quot;&gt;&lt;/p&gt;
&lt;p&gt;It seems like we don’t have access to install the service, I had to spend few minutes to find the issue,&lt;br&gt;run Developer commad prompt as administrator, then this permission issue is getting resolved.&lt;/p&gt;
&lt;p&gt;We can install a service using cmd as well,&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/cmd.PNG&quot; alt=&quot;installutil in cmd&quot;&gt;&lt;/p&gt;
&lt;p&gt;run cmd as administrator, then we can install the service using cmd as well.&lt;/p&gt;
&lt;h2 id=&quot;View-services&quot;&gt;&lt;a href=&quot;#View-services&quot; class=&quot;headerlink&quot; title=&quot;View services&quot;&gt;&lt;/a&gt;View services&lt;/h2&gt;&lt;p&gt;We can check available services, by just typing services in your program list.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/services.PNG&quot; alt=&quot;logic of the service&quot;&gt;&lt;/p&gt;
&lt;p&gt;I gave service name as ‘test service’ in installer class.&lt;/p&gt;
&lt;h2 id=&quot;Windows-service-on-Local-Computer-started-and-then-stopped&quot;&gt;&lt;a href=&quot;#Windows-service-on-Local-Computer-started-and-then-stopped&quot; class=&quot;headerlink&quot; title=&quot;Windows service on Local Computer started and then stopped&quot;&gt;&lt;/a&gt;Windows service on Local Computer started and then stopped&lt;/h2&gt;&lt;p&gt;I tried to start the service from the panel, But it didnt work,&lt;br&gt;I came across with this issue as well, spent lot of hours to find the issue, this issue comes normally when code has some kind of a error. It’s somewhat difficult to debug a windows service application to find out errors, &lt;/p&gt;
&lt;h2 id=&quot;Debug-a-windows-service-application-easily&quot;&gt;&lt;a href=&quot;#Debug-a-windows-service-application-easily&quot; class=&quot;headerlink&quot; title=&quot;Debug a windows service application easily&quot;&gt;&lt;/a&gt;Debug a windows service application easily&lt;/h2&gt;&lt;p&gt;normally in a windows service, program.cs looks like this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/programcs.PNG&quot; alt=&quot;program.cs file&quot;&gt;&lt;/p&gt;
&lt;p&gt;If we want to check whether our service implementation has any issue, we can use this trick&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/manualstart.PNG&quot; alt=&quot;manually start the service&quot;&gt;&lt;/p&gt;
&lt;p&gt;manually start a method that has exact same code as the service implementation.&lt;br&gt;inside of start method implementation, we can check whether service logic works properly.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/manualStartLogic.PNG&quot; alt=&quot;logic of the service&quot;&gt;&lt;/p&gt;
&lt;p&gt;using this trick, we can identify our service logic is working fine.&lt;/p&gt;
&lt;p&gt;Another way of testing the program logic is, create another console application and call service logic method from console app and verify it works fine.&lt;/p&gt;
&lt;h2 id=&quot;Debugger-Launch&quot;&gt;&lt;a href=&quot;#Debugger-Launch&quot; class=&quot;headerlink&quot; title=&quot;Debugger Launch&quot;&gt;&lt;/a&gt;Debugger Launch&lt;/h2&gt;&lt;p&gt;If we want to debug onStart method, we can launch the debugger in start method&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/debuggerLaunch.PNG&quot; alt=&quot;launch the debugger&quot;&gt;&lt;/p&gt;
&lt;p&gt;we can launch the debugger like this,&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/launchDebugger.PNG&quot; alt=&quot;launch the debugger&quot;&gt;&lt;/p&gt;
&lt;p&gt;we can debug the code like this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/debugMode.PNG&quot; alt=&quot;launch the debugger&quot;&gt;&lt;/p&gt;
&lt;p&gt;But in here specific file we attatched into debugger is getting loaded. So other files are not loaded. Only we can debug the service file as this code sample shows.&lt;/p&gt;
&lt;h2 id=&quot;Windows-service-can’t-connect-to-the-database&quot;&gt;&lt;a href=&quot;#Windows-service-can’t-connect-to-the-database&quot; class=&quot;headerlink&quot; title=&quot;Windows service can’t connect to the database&quot;&gt;&lt;/a&gt;Windows service can’t connect to the database&lt;/h2&gt;&lt;p&gt;In my service, i need to access to the database, But it gives me an error like this.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; Login failed. Login failed for user ‘NT AUTHORITY\SYSTEM’ &lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;windows service is running on ‘NT AUTHORITY\SYSTEM’ login. this login doesn’t seem to have access to the database&lt;br&gt;To resolve this, add this in your connectionstring, Integrated Security=SSPI or else create a user account for ‘NT AUTHORITY\SYSTEM’ in your database server and give necessary permissions. &lt;/p&gt;
&lt;p&gt;These are the guidelines to create a windows service, so it’s your time to try it.&lt;/p&gt;
&lt;p&gt;You can find a sample windows service application from here, &lt;a href=&quot;https://github.com/hansamaligamage/Scheduler&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/hansamaligamage/Scheduler&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;If you want to schedule something to run or your program takes long time to process, Sometimes we may have to create a seperate service a
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Simple smtp email with html body</title>
    <link href="http://yoursite.com/2016/06/30/Simple-smtp-email-with-html-body/"/>
    <id>http://yoursite.com/2016/06/30/Simple-smtp-email-with-html-body/</id>
    <published>2016-06-29T18:30:00.000Z</published>
    <updated>2016-09-18T18:19:49.579Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Smtp-Email&quot;&gt;&lt;a href=&quot;#Smtp-Email&quot; class=&quot;headerlink&quot; title=&quot;Smtp Email&quot;&gt;&lt;/a&gt;Smtp Email&lt;/h2&gt;&lt;p&gt;This post describes an easy way to send a email using a smtp server.&lt;/p&gt;
&lt;h2 id=&quot;Smtp-Client&quot;&gt;&lt;a href=&quot;#Smtp-Client&quot; class=&quot;headerlink&quot; title=&quot;Smtp Client&quot;&gt;&lt;/a&gt;Smtp Client&lt;/h2&gt;&lt;p&gt;To create a smtp client, we need to specify a smtp host and port, port is an optional parameter.&lt;br&gt;for some Smtp clients, we need to provide credintials. we need a NetworkCredintial instance for that. We can use Secure Socket Layer (SSL) to encrypt the connection.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/smtpClient.PNG&quot; alt=&quot;SMTP Client&quot;&gt;&lt;/p&gt;
&lt;p&gt;This shows how to instantiate a smtp client, If you are using gmail, host is smtp.gmail.com or else some specific smtp server. If port is available, specify the port&lt;/p&gt;
&lt;h2 id=&quot;Mail-Message&quot;&gt;&lt;a href=&quot;#Mail-Message&quot; class=&quot;headerlink&quot; title=&quot;Mail Message&quot;&gt;&lt;/a&gt;Mail Message&lt;/h2&gt;&lt;p&gt;After working with Smtp client, then we need is MailMessage object.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/mailMessage.PNG&quot; alt=&quot;Mail Message&quot;&gt;&lt;/p&gt;
&lt;p&gt;MailMessage from and to should be MailAddress instances.&lt;br&gt;In this example we used &lt;em&gt;IsBodyHtml&lt;/em&gt; attribute, to notify mail body can be a html string.&lt;/p&gt;
&lt;h2 id=&quot;Complete-code-is-shown-below&quot;&gt;&lt;a href=&quot;#Complete-code-is-shown-below&quot; class=&quot;headerlink&quot; title=&quot;Complete code is shown below&quot;&gt;&lt;/a&gt;Complete code is shown below&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/completeCode.PNG&quot; alt=&quot;Complete code to send an email&quot;&gt;&lt;/p&gt;
&lt;p&gt;You can clone sample code from this github repository and play with it, &lt;a href=&quot;https://github.com/hansamaligamage/Scheduler&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/hansamaligamage/Scheduler&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Smtp-Email&quot;&gt;&lt;a href=&quot;#Smtp-Email&quot; class=&quot;headerlink&quot; title=&quot;Smtp Email&quot;&gt;&lt;/a&gt;Smtp Email&lt;/h2&gt;&lt;p&gt;This post describes an easy way to sen
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>NLog Configurations</title>
    <link href="http://yoursite.com/2016/05/29/NLog-Configurations/"/>
    <id>http://yoursite.com/2016/05/29/NLog-Configurations/</id>
    <published>2016-05-28T18:30:00.000Z</published>
    <updated>2016-09-18T16:34:45.744Z</updated>
    
    <content type="html">&lt;p&gt;Many of the systems, we develop today needs some kind of a logging/tracing mechanism to identify issues or any kind of information.&lt;/p&gt;
&lt;h2 id=&quot;NLog&quot;&gt;&lt;a href=&quot;#NLog&quot; class=&quot;headerlink&quot; title=&quot;NLog&quot;&gt;&lt;/a&gt;NLog&lt;/h2&gt;&lt;p&gt;NLog is a free logging framework to log various kind of messages into a specified place. We can use NLog in a .NET environment, as well as with Xamarin and Windows phone.&lt;/p&gt;
&lt;h2 id=&quot;Logging&quot;&gt;&lt;a href=&quot;#Logging&quot; class=&quot;headerlink&quot; title=&quot;Logging&quot;&gt;&lt;/a&gt;Logging&lt;/h2&gt;&lt;p&gt;If we want to log a message from our application, We can use EventViewer without any libraries. But If we want to share the log file with someone else and analyse it in the future, we can’t do that with Eventviewer.&lt;br&gt; So we have to go for a logging framework if we want to write messages into a file or a database.&lt;/p&gt;
&lt;h2 id=&quot;Logging-Frameworks&quot;&gt;&lt;a href=&quot;#Logging-Frameworks&quot; class=&quot;headerlink&quot; title=&quot;Logging Frameworks&quot;&gt;&lt;/a&gt;Logging Frameworks&lt;/h2&gt;&lt;p&gt; We can use any of these frameworks for logging purpose, &lt;strong&gt;Log4net&lt;/strong&gt;, &lt;strong&gt;NLog&lt;/strong&gt;, &lt;strong&gt;ELMAH&lt;/strong&gt;, &lt;strong&gt;Microsoft Enterprise Library&lt;/strong&gt;, &lt;strong&gt;NSpring&lt;/strong&gt;. ELMAH is a web logging framework, All the other frameworks can be used with any .NET type of application.&lt;br&gt; When we use NLog or Log4net for logging, it takes just few minutes to integrate it to the application, But performancewise its not the same. NLog is much faster than Log4net and as well as all the above mentioned logging frameworks.&lt;br&gt; NSpring also easy to setup, but it requires more coding to log a message. With a large scale enterprise application, It will be tedious to work with NSpring.&lt;br&gt; Microsoft Enterprise Library (EntLib) is much faster, But need heavy configurations and coding to work with it. ELMAH is a web logger, It’s going to log the messages into a xml file by default.&lt;/p&gt;
&lt;p&gt; If you application needs file logging and more performance, better to go with NLog or NSpring. We can use Log4net also, it’s not that much faster, but easy to setup and use it in the application&lt;/p&gt;
&lt;h2 id=&quot;Install-NLog&quot;&gt;&lt;a href=&quot;#Install-NLog&quot; class=&quot;headerlink&quot; title=&quot;Install NLog&quot;&gt;&lt;/a&gt;Install NLog&lt;/h2&gt;&lt;p&gt; Latest stable version of NLog is NLog 4.3.5.&lt;br&gt; With Nuget Package manager, I installed NLog,&lt;/p&gt;
&lt;p&gt;  &lt;img src=&quot;/images/NLogInstallation.PNG&quot; alt=&quot;NLog installation&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;NLog-Targets&quot;&gt;&lt;a href=&quot;#NLog-Targets&quot; class=&quot;headerlink&quot; title=&quot;NLog Targets&quot;&gt;&lt;/a&gt;NLog Targets&lt;/h2&gt;&lt;p&gt; NLog targets are used to show, store or pass the message into another destination.  Some commonly used NLog targets are shown below,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Console : writes message to a console window.&lt;/li&gt;
&lt;li&gt;Event Log : writes message to event viewer.&lt;/li&gt;
&lt;li&gt;Debugger : writes messagee to the attatched debugger.&lt;/li&gt;
&lt;li&gt;File : writes log message to a file.&lt;/li&gt;
&lt;li&gt;Database : store log message in database.&lt;/li&gt;
&lt;li&gt;Memory : can write log message into a arraylist in memory.&lt;/li&gt;
&lt;li&gt;Mail : send log message by email.&lt;/li&gt;
&lt;li&gt;Method call : For log message, calls specific static method.&lt;/li&gt;
&lt;li&gt;Network : send log message over a network.&lt;/li&gt;
&lt;li&gt;Service : calls a web service for each log message. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And if these targets dont satisfy your requirements, you can create your own targets as well, (custom target)&lt;/p&gt;
&lt;h2 id=&quot;Target-Layout&quot;&gt;&lt;a href=&quot;#Target-Layout&quot; class=&quot;headerlink&quot; title=&quot;Target Layout&quot;&gt;&lt;/a&gt;Target Layout&lt;/h2&gt;&lt;p&gt; Target layout means how our log message is going to display, in which format, which order. We can create custom layout renders as well. Commonly used layouts are as follows,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;${callsite} : Class name, method name or source information of the log message.&lt;/li&gt;
&lt;li&gt;${callsite-linenumber} : line no of call site source.&lt;/li&gt;
&lt;li&gt;${date} : date and time&lt;/li&gt;
&lt;li&gt;${exception} : exception details&lt;/li&gt;
&lt;li&gt;${level} : log level&lt;/li&gt;
&lt;li&gt;${logger} : logger name&lt;/li&gt;
&lt;li&gt;${longdate} : date and time in long format.&lt;/li&gt;
&lt;li&gt;${message} : log message.&lt;/li&gt;
&lt;li&gt;${stacktrace} : stack trace&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;NLog-rules&quot;&gt;&lt;a href=&quot;#NLog-rules&quot; class=&quot;headerlink&quot; title=&quot;NLog rules&quot;&gt;&lt;/a&gt;NLog rules&lt;/h2&gt;&lt;p&gt; NLog rules are called as a log routing table. It’s going to matches with a target and writes into a log with specified layout. Some of the attributes in NLog rules,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;name : logger name,&lt;/li&gt;
&lt;li&gt;minlevel : minimum log level for a rule to match&lt;/li&gt;
&lt;li&gt;maxlevel : maximum log level for a rule to match&lt;/li&gt;
&lt;li&gt;level : single log level for a rule to match&lt;/li&gt;
&lt;li&gt;levels : comma seperated list of logs for a rule to match&lt;/li&gt;
&lt;li&gt;write to : comma seperated list of targets to be written when a rule matches&lt;/li&gt;
&lt;li&gt;final : no further rules are processed when this rule matches&lt;/li&gt;
&lt;li&gt;enabled : going to disable/enable rules&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Nlog-levels&quot;&gt;&lt;a href=&quot;#Nlog-levels&quot; class=&quot;headerlink&quot; title=&quot;Nlog levels&quot;&gt;&lt;/a&gt;Nlog levels&lt;/h2&gt;&lt;p&gt; One thing to note, In these level attribute, log messages are ordered from type. Trace is the minlevel log type, then Debug, Info, Warn, Error and Fatal.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Trace level can be used when we need to notify the begining and end of a method &lt;/li&gt;
&lt;li&gt;Debug logs, we can identify whether session is expired, user is authenticated &lt;/li&gt;
&lt;li&gt;Info logs are used for more generic scenarios like, Email sent.&lt;/li&gt;
&lt;li&gt;Warn level can be used to notify warnings &lt;/li&gt;
&lt;li&gt;Error logs are used for exceptions and when application crashes. &lt;/li&gt;
&lt;li&gt;Fatal logs are highest level, used for most important cases.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;Let’s-see-what’s-in-action&quot;&gt;&lt;a href=&quot;#Let’s-see-what’s-in-action&quot; class=&quot;headerlink&quot; title=&quot;Let’s see what’s in action&quot;&gt;&lt;/a&gt;Let’s see what’s in action&lt;/h2&gt;&lt;p&gt; In configuration file, I have configured log type and log level, I have used file logging, Trace as a minimum logging level.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/configFile.PNG&quot; alt=&quot;configuration file&quot;&gt;&lt;/p&gt;
&lt;p&gt; In code, I have written like this, &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/code.PNG&quot; alt=&quot;code i have written&quot;&gt;&lt;/p&gt;
&lt;p&gt; Let’s check how it’s written in the log file&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/output.PNG&quot; alt=&quot;output seeems like this&quot;&gt;&lt;/p&gt;
&lt;p&gt;In output, we can see the layout has been applied, ${longdate} ${callsite} ${callsite-linenumber} ${date} ${level} ${message}&lt;/p&gt;
&lt;h2 id=&quot;How-to-use-multiple-targets&quot;&gt;&lt;a href=&quot;#How-to-use-multiple-targets&quot; class=&quot;headerlink&quot; title=&quot;How to use multiple targets&quot;&gt;&lt;/a&gt;How to use multiple targets&lt;/h2&gt;&lt;p&gt;Let’s see how to add multiple targets for logging&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/MultipleTargetsConfig.PNG&quot; alt=&quot;configuration file&quot;&gt;&lt;/p&gt;
&lt;p&gt;In configuration file, i added two targets, one is to log into a file, other target is to log into a console window&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/MultipleTargetsCode.PNG&quot; alt=&quot;configuration file&quot;&gt;&lt;/p&gt;
&lt;p&gt; File logging output is same as previous output, console output is seems like this. In console logging, I used a different layout like this, ${date} ${callsite} ${level} ${message} and minimmum log level is added as Warning level, So output got changed like this.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt; Some resources i referred, &lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.loggly.com/blog/benchmarking-5-popular-net-logging-libraries/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.loggly.com/blog/benchmarking-5-popular-net-logging-libraries/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/nlog/nlog/wiki/Layout-Renderers&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/nlog/nlog/wiki/Layout-Renderers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/NLog/NLog/wiki/Log-levels&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/NLog/NLog/wiki/Log-levels&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I creted a github repo to these code samples, Please have a look, &lt;a href=&quot;https://github.com/hansamaligamage/Logger&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/hansamaligamage/Logger&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Many of the systems, we develop today needs some kind of a logging/tracing mechanism to identify issues or any kind of information.&lt;/p&gt;
&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>LINQ comes to rescue!</title>
    <link href="http://yoursite.com/2016/04/04/LINQ%20comes%20to%20rescue/"/>
    <id>http://yoursite.com/2016/04/04/LINQ comes to rescue/</id>
    <published>2016-04-03T18:30:00.000Z</published>
    <updated>2016-06-07T17:03:39.368Z</updated>
    
    <content type="html">&lt;p&gt;Today, I’m going to explain a very small but tricky code part, day to day we use this, but never give it a second glance, because of that we miss this in many places :)&lt;/p&gt;
&lt;p&gt;Let’s first create a simple class&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/carClass.png&quot; alt=&quot;Car class&quot;&gt;&lt;/p&gt;
&lt;p&gt;we have list of cars, like this.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/listOfCars.png&quot; alt=&quot;List of cars&quot;&gt;&lt;/p&gt;
&lt;p&gt;I want to set &lt;em&gt;Milege&lt;/em&gt; property as  ‘100’ when year is ‘2015’&lt;br&gt;so, what’s the method comes into your mind ?&lt;br&gt;for loop, foreach or while loop, Iterations are not so good when it comes to the performance.&lt;/p&gt;
&lt;p&gt;With the help of LINQ, we can perform the filtering and modification both in just one line :)&lt;/p&gt;
&lt;p&gt;In LINQ world, we have many operations to filter, to projection, to modify and many more.&lt;/p&gt;
&lt;p&gt;Solution from LINQ,&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/linqQuery.png&quot; alt=&quot;LINQ query to filter and modify list values.&quot;&gt;&lt;/p&gt;
&lt;p&gt; Yes, It’s difficult to read the code though, But if you have performance concerns, and want to write the program with few lines of code, You can get use of this LINQ query.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Today, I’m going to explain a very small but tricky code part, day to day we use this, but never give it a second glance, because of that
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ODATA Reads with Parameters</title>
    <link href="http://yoursite.com/2016/03/02/ODATA%20Reads%20with%20Parameters/"/>
    <id>http://yoursite.com/2016/03/02/ODATA Reads with Parameters/</id>
    <published>2016-03-01T18:30:00.000Z</published>
    <updated>2016-09-18T16:19:10.132Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Data-READs-with-Parameters&quot;&gt;&lt;a href=&quot;#Data-READs-with-Parameters&quot; class=&quot;headerlink&quot; title=&quot;Data READs with Parameters&quot;&gt;&lt;/a&gt;Data READs with Parameters&lt;/h2&gt;&lt;p&gt;In this post, We’ll focus on how to read a OData service with a parameter.&lt;/p&gt;
&lt;h2 id=&quot;Service-method-with-a-parameter&quot;&gt;&lt;a href=&quot;#Service-method-with-a-parameter&quot; class=&quot;headerlink&quot; title=&quot;Service method with a parameter&quot;&gt;&lt;/a&gt;Service method with a parameter&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/GetMethodWithParameter.png&quot; alt=&quot;Get Method With a Parameter.&quot;&gt;&lt;/p&gt;
&lt;p&gt;Now, we’ll see how to retrieve data with a parameter,&lt;/p&gt;
&lt;h2 id=&quot;Url-in-the-browser&quot;&gt;&lt;a href=&quot;#Url-in-the-browser&quot; class=&quot;headerlink&quot; title=&quot;Url in the browser&quot;&gt;&lt;/a&gt;Url in the browser&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/GetMethodUrl.png&quot; alt=&quot;Get Method Url With a Parameter.&quot;&gt;&lt;/p&gt;
&lt;p&gt;In browser, we can see only filtered students. in url, append the parameter with values.&lt;/p&gt;
&lt;h2 id=&quot;Power-Query-Window&quot;&gt;&lt;a href=&quot;#Power-Query-Window&quot; class=&quot;headerlink&quot; title=&quot;Power Query Window&quot;&gt;&lt;/a&gt;Power Query Window&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/PowerQueryWindow.png&quot; alt=&quot;Power Query editor.&quot;&gt;&lt;/p&gt;
&lt;p&gt;From the Power Query window, we can see dataset like this.&lt;/p&gt;
&lt;p&gt;I could create a github repo for this code sample, Please feel free to check it, &lt;a href=&quot;https://github.com/hansamaligamage/ODATAExample&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/hansamaligamage/ODATAExample&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Data-READs-with-Parameters&quot;&gt;&lt;a href=&quot;#Data-READs-with-Parameters&quot; class=&quot;headerlink&quot; title=&quot;Data READs with Parameters&quot;&gt;&lt;/a&gt;Data REA
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ODATA Reads</title>
    <link href="http://yoursite.com/2016/02/19/ODATA%20Reads/"/>
    <id>http://yoursite.com/2016/02/19/ODATA Reads/</id>
    <published>2016-02-19T13:15:36.000Z</published>
    <updated>2016-09-18T16:18:12.318Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Data-READs&quot;&gt;&lt;a href=&quot;#Data-READs&quot; class=&quot;headerlink&quot; title=&quot;Data READs&quot;&gt;&lt;/a&gt;Data READs&lt;/h2&gt;&lt;p&gt;Let’s start with a newer version of ODATA to access data from a existing service, In this solution I have used &lt;em&gt; Web API 2.2 with ODATA v4 &lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;ODATA-v4-package&quot;&gt;&lt;a href=&quot;#ODATA-v4-package&quot; class=&quot;headerlink&quot; title=&quot;ODATA v4 package&quot;&gt;&lt;/a&gt;ODATA v4 package&lt;/h2&gt;&lt;p&gt;Visual Studio has a built in package to create ODATA v4 services, Package contains all the libraries required to create a ODATA v4 endpoint.&lt;/p&gt;
&lt;h2 id=&quot;Integrate-ODATA-v4-package-into-solution&quot;&gt;&lt;a href=&quot;#Integrate-ODATA-v4-package-into-solution&quot; class=&quot;headerlink&quot; title=&quot;Integrate ODATA v4 package into solution&quot;&gt;&lt;/a&gt;Integrate ODATA v4 package into solution&lt;/h2&gt;&lt;p&gt;We can add the necessary OData package into solution like this, Select &lt;em&gt; Microsoft ASP.NET Web API 2.2 for OData v4.0 &lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/nugetPackageManagementStore.png&quot; alt=&quot;nuget package management store.&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;All-the-relevant-libraries-are-installing&quot;&gt;&lt;a href=&quot;#All-the-relevant-libraries-are-installing&quot; class=&quot;headerlink&quot; title=&quot;All the relevant libraries are installing&quot;&gt;&lt;/a&gt;All the relevant libraries are installing&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/odataRelatedPackagesInstall.png&quot; alt=&quot;All the ODATA related libraries are installing.&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Register-OData-endpoint&quot;&gt;&lt;a href=&quot;#Register-OData-endpoint&quot; class=&quot;headerlink&quot; title=&quot;Register OData endpoint&quot;&gt;&lt;/a&gt;Register OData endpoint&lt;/h2&gt;&lt;p&gt;Register service endpoint in Register method of WebApiConfig file&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/registerServiceEndpoints.png&quot; alt=&quot;Register service endpoints.&quot;&gt;&lt;/p&gt;
&lt;p&gt;In line no 22, I have exposed the Student entity, Data read method is implemented in OData controller, &lt;em&gt; StudentController &lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&quot;Student-Controller-implements-OData-Controller&quot;&gt;&lt;a href=&quot;#Student-Controller-implements-OData-Controller&quot; class=&quot;headerlink&quot; title=&quot;Student Controller implements OData Controller&quot;&gt;&lt;/a&gt;Student Controller implements OData Controller&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/studentController.png&quot; alt=&quot;Student Controller&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;StudentController&lt;/em&gt; inherits from OData Controller, So all the CRUD operations related to student can be implemented in this controller.&lt;/p&gt;
&lt;h2 id=&quot;How-it-works-in-the-browser&quot;&gt;&lt;a href=&quot;#How-it-works-in-the-browser&quot; class=&quot;headerlink&quot; title=&quot;How it works in the browser&quot;&gt;&lt;/a&gt;How it works in the browser&lt;/h2&gt;&lt;p&gt;now ping to the OData endpoint,&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/allAvailableEntities.png&quot; alt=&quot;Available entities&quot;&gt;&lt;/p&gt;
&lt;p&gt;We can see all the available entities in the endpoint with metadata.&lt;/p&gt;
&lt;h2 id=&quot;Read-Students&quot;&gt;&lt;a href=&quot;#Read-Students&quot; class=&quot;headerlink&quot; title=&quot;Read Students&quot;&gt;&lt;/a&gt;Read Students&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/readStudents.png&quot; alt=&quot;Read Students&quot;&gt;&lt;/p&gt;
&lt;p&gt;By appending entity, &lt;em&gt; Student &lt;/em&gt; into url, we can read student data&lt;/p&gt;
&lt;h2 id=&quot;Read-Data-types&quot;&gt;&lt;a href=&quot;#Read-Data-types&quot; class=&quot;headerlink&quot; title=&quot;Read Data types&quot;&gt;&lt;/a&gt;Read Data types&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/readDatatypes.png&quot; alt=&quot;Read data types&quot;&gt;&lt;/p&gt;
&lt;p&gt;We can read data types of student using the &lt;em&gt; $metadata &lt;/em&gt; tag&lt;/p&gt;
&lt;h2 id=&quot;Excel-2016-with-OData-v4&quot;&gt;&lt;a href=&quot;#Excel-2016-with-OData-v4&quot; class=&quot;headerlink&quot; title=&quot;Excel 2016 with OData v4&quot;&gt;&lt;/a&gt;Excel 2016 with OData v4&lt;/h2&gt;&lt;p&gt;We already know office is not only for manipulating documents, We can perform many advanced queries with Excel. Excel supports to fetch data from different other sources, newer update is OData sources &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/Excel2016odatav4.png&quot; alt=&quot;Excel 2016 - ODATA v4&quot;&gt;&lt;/p&gt;
&lt;p&gt;In excel 2016, We can connect to a OData source like this,&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/dataConnectionWizard.png&quot; alt=&quot;Data connection wizard&quot;&gt;&lt;/p&gt;
&lt;p&gt;But we get an error!!!!!!&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/errorDataConnectionWizard.png&quot; alt=&quot;error from Data connection wizard - office 2016 odata v4&quot;&gt;&lt;/p&gt;
&lt;p&gt;It clearly says Excel 2016 can be only integrated with Odata v3 or any earlier data feeds :) But for your information, with Excel 2016 as well as Excel 2013, we can integrate OData v3 &lt;/p&gt;
&lt;h2 id=&quot;Excel-2013-amp-OData-v4&quot;&gt;&lt;a href=&quot;#Excel-2013-amp-OData-v4&quot; class=&quot;headerlink&quot; title=&quot;Excel 2013 &amp;amp; OData v4 ?&quot;&gt;&lt;/a&gt;Excel 2013 &amp;amp; OData v4 ?&lt;/h2&gt;&lt;p&gt;With Excel 2013, ODATA v4 is not compatible. But we can use a V3 format service with Excel 2013.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/errorExcel2013ODatav4.png&quot; alt=&quot;error - office 2013 odata v4&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;Excel-2016-with-OData-v4-Power-Query&quot;&gt;&lt;a href=&quot;#Excel-2016-with-OData-v4-Power-Query&quot; class=&quot;headerlink&quot; title=&quot;Excel 2016 with OData v4 - Power Query&quot;&gt;&lt;/a&gt;Excel 2016 with OData v4 - Power Query&lt;/h2&gt;&lt;p&gt;With ODATA v4, we can’t use ODATA source option, But we have Power Query option to analyse data.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/Excel2016ODatav4WithPowerQuery.png&quot; alt=&quot;Excel 2016 - ODATA v4 with Power Query&quot;&gt;&lt;/p&gt;
&lt;p&gt;In Data tab, we have many options to fetch data from different other sources, We can select &lt;em&gt;From OData Feed&lt;/em&gt; option.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/powerQueryOdatafeed.png&quot; alt=&quot;PowerQuery - Odata feed&quot;&gt;&lt;/p&gt;
&lt;p&gt;We can use Office 2016 Power Query option with OData v4.&lt;/p&gt;
&lt;h2 id=&quot;Power-Query-Editor&quot;&gt;&lt;a href=&quot;#Power-Query-Editor&quot; class=&quot;headerlink&quot; title=&quot;Power Query Editor&quot;&gt;&lt;/a&gt;Power Query Editor&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/powerQueryEditor.png&quot; alt=&quot;PowerQuery editor&quot;&gt;&lt;/p&gt;
&lt;p&gt;This is the query editor, we can select/remove columns, can remove duplicates, group by a column, create a new column based on a mathematical function and much more advanced operations.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/queryEditorWindow.png&quot; alt=&quot;Query editor window&quot;&gt;&lt;/p&gt;
&lt;p&gt;In the next section, we’ll see how to read data by passing a value :)&lt;/p&gt;
&lt;p&gt;I could create a github repo for this code sample, Please feel free to check it, &lt;a href=&quot;https://github.com/hansamaligamage/ODATAExample&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/hansamaligamage/ODATAExample&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Data-READs&quot;&gt;&lt;a href=&quot;#Data-READs&quot; class=&quot;headerlink&quot; title=&quot;Data READs&quot;&gt;&lt;/a&gt;Data READs&lt;/h2&gt;&lt;p&gt;Let’s start with a newer version of OD
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ODATA Features</title>
    <link href="http://yoursite.com/2016/01/23/ODATAFeatures/"/>
    <id>http://yoursite.com/2016/01/23/ODATAFeatures/</id>
    <published>2016-01-23T13:15:36.000Z</published>
    <updated>2016-06-03T10:18:15.894Z</updated>
    
    <content type="html">&lt;h2 id=&quot;ODATA&quot;&gt;&lt;a href=&quot;#ODATA&quot; class=&quot;headerlink&quot; title=&quot;ODATA&quot;&gt;&lt;/a&gt;ODATA&lt;/h2&gt;&lt;p&gt;ODATA is a open data protocol to access data using REST architecture. ODATA is a Microsoft standard, but available with Android &amp;amp; IOS platforms as well. ODATA supports for JSON and Atom formats. With the help of ODATA , we can access data in variety of sources like relational databases, Web sites, File systems and Content Management Systems.&lt;/p&gt;
&lt;h2 id=&quot;ODATA-has-more-features-than-REST&quot;&gt;&lt;a href=&quot;#ODATA-has-more-features-than-REST&quot; class=&quot;headerlink&quot; title=&quot;ODATA has more features than REST!&quot;&gt;&lt;/a&gt;ODATA has more features than REST!&lt;/h2&gt;&lt;p&gt;REST is an architectural pattern to implement a service, But with ODATA it’s going to provide more features to more sources like File systems, Content Management Systems. ODATA services supports for query options like filter, select, expand, order by and many more. As per our requirement, we can filter the result set, order as we want. And we can skip some rows, Even we can select the top row as well.&lt;/p&gt;
&lt;h2 id=&quot;It’s-2016&quot;&gt;&lt;a href=&quot;#It’s-2016&quot; class=&quot;headerlink&quot; title=&quot;It’s 2016!!!!&quot;&gt;&lt;/a&gt;It’s 2016!!!!&lt;/h2&gt;&lt;p&gt;Microsoft has introduced variety of features with Office 2016, If your old REST services are using ODATA protocol, We can implement a simple power BI solution just with Excel itself.&lt;/p&gt;
&lt;h2 id=&quot;ODATA-Versions-so-far&quot;&gt;&lt;a href=&quot;#ODATA-Versions-so-far&quot; class=&quot;headerlink&quot; title=&quot;ODATA Versions so far&quot;&gt;&lt;/a&gt;ODATA Versions so far&lt;/h2&gt;&lt;p&gt;After ODATA V2 and ODATA V3, Now ODATA V4 has been released as a major release. If you want to build a open data service, we can use &lt;strong&gt; ODATA v4 with WebAPI 2.2 &lt;/strong&gt; as a solution.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ODATA&quot;&gt;&lt;a href=&quot;#ODATA&quot; class=&quot;headerlink&quot; title=&quot;ODATA&quot;&gt;&lt;/a&gt;ODATA&lt;/h2&gt;&lt;p&gt;ODATA is a open data protocol to access data using REST ar
    
    </summary>
    
    
  </entry>
  
</feed>
